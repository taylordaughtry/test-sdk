<?php
/**
 * Category
 *
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Model;

use \ArrayAccess;
use \HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * Category Class Doc Comment
 *
 * @category Class
 * @description Used for initial import only
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Category extends \HappyCog\OsborneApi\Resources\Base\Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'parentId' => 'int',
        'enabled' => 'bool',
        'showChildren' => 'bool',
        'seoTitle' => 'string',
        'seoKeywords' => 'string',
        'seoDescription' => 'string',
        'webFriendlyName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'parentId' => null,
        'enabled' => null,
        'showChildren' => null,
        'seoTitle' => null,
        'seoKeywords' => null,
        'seoDescription' => null,
        'webFriendlyName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'parentId' => 'parentId',
        'enabled' => 'enabled',
        'showChildren' => 'showChildren',
        'seoTitle' => 'seoTitle',
        'seoKeywords' => 'seoKeywords',
        'seoDescription' => 'seoDescription',
        'webFriendlyName' => 'webFriendlyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'parentId' => 'setParentId',
        'enabled' => 'setEnabled',
        'showChildren' => 'setShowChildren',
        'seoTitle' => 'setSeoTitle',
        'seoKeywords' => 'setSeoKeywords',
        'seoDescription' => 'setSeoDescription',
        'webFriendlyName' => 'setWebFriendlyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'parentId' => 'getParentId',
        'enabled' => 'getEnabled',
        'showChildren' => 'getShowChildren',
        'seoTitle' => 'getSeoTitle',
        'seoKeywords' => 'getSeoKeywords',
        'seoDescription' => 'getSeoDescription',
        'webFriendlyName' => 'getWebFriendlyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : true;
        $this->container['showChildren'] = isset($data['showChildren']) ? $data['showChildren'] : true;
        $this->container['seoTitle'] = isset($data['seoTitle']) ? $data['seoTitle'] : null;
        $this->container['seoKeywords'] = isset($data['seoKeywords']) ? $data['seoKeywords'] : null;
        $this->container['seoDescription'] = isset($data['seoDescription']) ? $data['seoDescription'] : null;
        $this->container['webFriendlyName'] = isset($data['webFriendlyName']) ? $data['webFriendlyName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description TODO - WYSIWYG / Rich Text field migration
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId parentId
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets showChildren
     *
     * @return bool
     */
    public function getShowChildren()
    {
        return $this->container['showChildren'];
    }

    /**
     * Sets showChildren
     *
     * @param bool $showChildren showChildren
     *
     * @return $this
     */
    public function setShowChildren($showChildren)
    {
        $this->container['showChildren'] = $showChildren;

        return $this;
    }

    /**
     * Gets seoTitle
     *
     * @return string
     */
    public function getSeoTitle()
    {
        return $this->container['seoTitle'];
    }

    /**
     * Sets seoTitle
     *
     * @param string $seoTitle seoTitle
     *
     * @return $this
     */
    public function setSeoTitle($seoTitle)
    {
        $this->container['seoTitle'] = $seoTitle;

        return $this;
    }

    /**
     * Gets seoKeywords
     *
     * @return string
     */
    public function getSeoKeywords()
    {
        return $this->container['seoKeywords'];
    }

    /**
     * Sets seoKeywords
     *
     * @param string $seoKeywords seoKeywords
     *
     * @return $this
     */
    public function setSeoKeywords($seoKeywords)
    {
        $this->container['seoKeywords'] = $seoKeywords;

        return $this;
    }

    /**
     * Gets seoDescription
     *
     * @return string
     */
    public function getSeoDescription()
    {
        return $this->container['seoDescription'];
    }

    /**
     * Sets seoDescription
     *
     * @param string $seoDescription seoDescription
     *
     * @return $this
     */
    public function setSeoDescription($seoDescription)
    {
        $this->container['seoDescription'] = $seoDescription;

        return $this;
    }

    /**
     * Gets webFriendlyName
     *
     * @return string
     */
    public function getWebFriendlyName()
    {
        return $this->container['webFriendlyName'];
    }

    /**
     * Sets webFriendlyName
     *
     * @param string $webFriendlyName webFriendlyName
     *
     * @return $this
     */
    public function setWebFriendlyName($webFriendlyName)
    {
        $this->container['webFriendlyName'] = $webFriendlyName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


