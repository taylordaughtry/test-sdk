<?php
/**
 * ProductService
 *
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Model;

use \ArrayAccess;
use \HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * ProductService Class Doc Comment
 *
 * @category Class
 * @description TODO - Determine what the difference is between name and title
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductService extends \HappyCog\OsborneApi\Resources\Base\Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'title' => 'string',
        'description' => 'string',
        'internalDescription' => 'string',
        'price' => 'float',
        'isPercentage' => 'bool',
        'serviceCode' => 'string',
        'helpFileUrl' => 'string',
        'returnable' => 'bool',
        'isActive' => 'bool',
        'publishToWeb' => 'bool',
        'hasRestockingFee' => 'bool',
        'hasDimensionImpact' => 'bool',
        'isTaxable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'title' => null,
        'description' => null,
        'internalDescription' => null,
        'price' => null,
        'isPercentage' => null,
        'serviceCode' => null,
        'helpFileUrl' => null,
        'returnable' => null,
        'isActive' => null,
        'publishToWeb' => null,
        'hasRestockingFee' => null,
        'hasDimensionImpact' => null,
        'isTaxable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'title' => 'title',
        'description' => 'description',
        'internalDescription' => 'internalDescription',
        'price' => 'price',
        'isPercentage' => 'isPercentage',
        'serviceCode' => 'serviceCode',
        'helpFileUrl' => 'helpFileUrl',
        'returnable' => 'returnable',
        'isActive' => 'isActive',
        'publishToWeb' => 'publishToWeb',
        'hasRestockingFee' => 'hasRestockingFee',
        'hasDimensionImpact' => 'hasDimensionImpact',
        'isTaxable' => 'isTaxable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'internalDescription' => 'setInternalDescription',
        'price' => 'setPrice',
        'isPercentage' => 'setIsPercentage',
        'serviceCode' => 'setServiceCode',
        'helpFileUrl' => 'setHelpFileUrl',
        'returnable' => 'setReturnable',
        'isActive' => 'setIsActive',
        'publishToWeb' => 'setPublishToWeb',
        'hasRestockingFee' => 'setHasRestockingFee',
        'hasDimensionImpact' => 'setHasDimensionImpact',
        'isTaxable' => 'setIsTaxable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'internalDescription' => 'getInternalDescription',
        'price' => 'getPrice',
        'isPercentage' => 'getIsPercentage',
        'serviceCode' => 'getServiceCode',
        'helpFileUrl' => 'getHelpFileUrl',
        'returnable' => 'getReturnable',
        'isActive' => 'getIsActive',
        'publishToWeb' => 'getPublishToWeb',
        'hasRestockingFee' => 'getHasRestockingFee',
        'hasDimensionImpact' => 'getHasDimensionImpact',
        'isTaxable' => 'getIsTaxable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['internalDescription'] = isset($data['internalDescription']) ? $data['internalDescription'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['isPercentage'] = isset($data['isPercentage']) ? $data['isPercentage'] : false;
        $this->container['serviceCode'] = isset($data['serviceCode']) ? $data['serviceCode'] : null;
        $this->container['helpFileUrl'] = isset($data['helpFileUrl']) ? $data['helpFileUrl'] : null;
        $this->container['returnable'] = isset($data['returnable']) ? $data['returnable'] : true;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : true;
        $this->container['publishToWeb'] = isset($data['publishToWeb']) ? $data['publishToWeb'] : true;
        $this->container['hasRestockingFee'] = isset($data['hasRestockingFee']) ? $data['hasRestockingFee'] : true;
        $this->container['hasDimensionImpact'] = isset($data['hasDimensionImpact']) ? $data['hasDimensionImpact'] : true;
        $this->container['isTaxable'] = isset($data['isTaxable']) ? $data['isTaxable'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets internalDescription
     *
     * @return string
     */
    public function getInternalDescription()
    {
        return $this->container['internalDescription'];
    }

    /**
     * Sets internalDescription
     *
     * @param string $internalDescription internalDescription
     *
     * @return $this
     */
    public function setInternalDescription($internalDescription)
    {
        $this->container['internalDescription'] = $internalDescription;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets isPercentage
     *
     * @return bool
     */
    public function getIsPercentage()
    {
        return $this->container['isPercentage'];
    }

    /**
     * Sets isPercentage
     *
     * @param bool $isPercentage isPercentage
     *
     * @return $this
     */
    public function setIsPercentage($isPercentage)
    {
        $this->container['isPercentage'] = $isPercentage;

        return $this;
    }

    /**
     * Gets serviceCode
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['serviceCode'];
    }

    /**
     * Sets serviceCode
     *
     * @param string $serviceCode serviceCode
     *
     * @return $this
     */
    public function setServiceCode($serviceCode)
    {
        $this->container['serviceCode'] = $serviceCode;

        return $this;
    }

    /**
     * Gets helpFileUrl
     *
     * @return string
     */
    public function getHelpFileUrl()
    {
        return $this->container['helpFileUrl'];
    }

    /**
     * Sets helpFileUrl
     *
     * @param string $helpFileUrl This will only be used pre-launch to identify services that need help pages migrated.
     *
     * @return $this
     */
    public function setHelpFileUrl($helpFileUrl)
    {
        $this->container['helpFileUrl'] = $helpFileUrl;

        return $this;
    }

    /**
     * Gets returnable
     *
     * @return bool
     */
    public function getReturnable()
    {
        return $this->container['returnable'];
    }

    /**
     * Sets returnable
     *
     * @param bool $returnable returnable
     *
     * @return $this
     */
    public function setReturnable($returnable)
    {
        $this->container['returnable'] = $returnable;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets publishToWeb
     *
     * @return bool
     */
    public function getPublishToWeb()
    {
        return $this->container['publishToWeb'];
    }

    /**
     * Sets publishToWeb
     *
     * @param bool $publishToWeb publishToWeb
     *
     * @return $this
     */
    public function setPublishToWeb($publishToWeb)
    {
        $this->container['publishToWeb'] = $publishToWeb;

        return $this;
    }

    /**
     * Gets hasRestockingFee
     *
     * @return bool
     */
    public function getHasRestockingFee()
    {
        return $this->container['hasRestockingFee'];
    }

    /**
     * Sets hasRestockingFee
     *
     * @param bool $hasRestockingFee hasRestockingFee
     *
     * @return $this
     */
    public function setHasRestockingFee($hasRestockingFee)
    {
        $this->container['hasRestockingFee'] = $hasRestockingFee;

        return $this;
    }

    /**
     * Gets hasDimensionImpact
     *
     * @return bool
     */
    public function getHasDimensionImpact()
    {
        return $this->container['hasDimensionImpact'];
    }

    /**
     * Sets hasDimensionImpact
     *
     * @param bool $hasDimensionImpact hasDimensionImpact
     *
     * @return $this
     */
    public function setHasDimensionImpact($hasDimensionImpact)
    {
        $this->container['hasDimensionImpact'] = $hasDimensionImpact;

        return $this;
    }

    /**
     * Gets isTaxable
     *
     * @return bool
     */
    public function getIsTaxable()
    {
        return $this->container['isTaxable'];
    }

    /**
     * Sets isTaxable
     *
     * @param bool $isTaxable isTaxable
     *
     * @return $this
     */
    public function setIsTaxable($isTaxable)
    {
        $this->container['isTaxable'] = $isTaxable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


