<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Model;

use \ArrayAccess;
use \HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product extends \HappyCog\OsborneApi\Resources\Base\Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'productCode' => 'string',
        'isActive' => 'bool',
        'publishToWeb' => 'bool',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'disableQuantityDiscount' => 'bool',
        'discountAllowed' => 'bool',
        'returnable' => 'bool',
        'taxable' => 'bool',
        'allowSkirt' => 'bool',
        'customerSpecific' => 'bool',
        'seoTitle' => 'string',
        'seoKeywords' => 'string',
        'seoDescription' => 'string',
        'webFriendlyName' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'productCode' => null,
        'isActive' => null,
        'publishToWeb' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'disableQuantityDiscount' => null,
        'discountAllowed' => null,
        'returnable' => null,
        'taxable' => null,
        'allowSkirt' => null,
        'customerSpecific' => null,
        'seoTitle' => null,
        'seoKeywords' => null,
        'seoDescription' => null,
        'webFriendlyName' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'productCode' => 'productCode',
        'isActive' => 'isActive',
        'publishToWeb' => 'publishToWeb',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'disableQuantityDiscount' => 'disableQuantityDiscount',
        'discountAllowed' => 'discountAllowed',
        'returnable' => 'returnable',
        'taxable' => 'taxable',
        'allowSkirt' => 'allowSkirt',
        'customerSpecific' => 'customerSpecific',
        'seoTitle' => 'seoTitle',
        'seoKeywords' => 'seoKeywords',
        'seoDescription' => 'seoDescription',
        'webFriendlyName' => 'webFriendlyName',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'productCode' => 'setProductCode',
        'isActive' => 'setIsActive',
        'publishToWeb' => 'setPublishToWeb',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'disableQuantityDiscount' => 'setDisableQuantityDiscount',
        'discountAllowed' => 'setDiscountAllowed',
        'returnable' => 'setReturnable',
        'taxable' => 'setTaxable',
        'allowSkirt' => 'setAllowSkirt',
        'customerSpecific' => 'setCustomerSpecific',
        'seoTitle' => 'setSeoTitle',
        'seoKeywords' => 'setSeoKeywords',
        'seoDescription' => 'setSeoDescription',
        'webFriendlyName' => 'setWebFriendlyName',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'productCode' => 'getProductCode',
        'isActive' => 'getIsActive',
        'publishToWeb' => 'getPublishToWeb',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'disableQuantityDiscount' => 'getDisableQuantityDiscount',
        'discountAllowed' => 'getDiscountAllowed',
        'returnable' => 'getReturnable',
        'taxable' => 'getTaxable',
        'allowSkirt' => 'getAllowSkirt',
        'customerSpecific' => 'getCustomerSpecific',
        'seoTitle' => 'getSeoTitle',
        'seoKeywords' => 'getSeoKeywords',
        'seoDescription' => 'getSeoDescription',
        'webFriendlyName' => 'getWebFriendlyName',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['productCode'] = isset($data['productCode']) ? $data['productCode'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : true;
        $this->container['publishToWeb'] = isset($data['publishToWeb']) ? $data['publishToWeb'] : true;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['disableQuantityDiscount'] = isset($data['disableQuantityDiscount']) ? $data['disableQuantityDiscount'] : true;
        $this->container['discountAllowed'] = isset($data['discountAllowed']) ? $data['discountAllowed'] : true;
        $this->container['returnable'] = isset($data['returnable']) ? $data['returnable'] : true;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : true;
        $this->container['allowSkirt'] = isset($data['allowSkirt']) ? $data['allowSkirt'] : false;
        $this->container['customerSpecific'] = isset($data['customerSpecific']) ? $data['customerSpecific'] : false;
        $this->container['seoTitle'] = isset($data['seoTitle']) ? $data['seoTitle'] : null;
        $this->container['seoKeywords'] = isset($data['seoKeywords']) ? $data['seoKeywords'] : null;
        $this->container['seoDescription'] = isset($data['seoDescription']) ? $data['seoDescription'] : null;
        $this->container['webFriendlyName'] = isset($data['webFriendlyName']) ? $data['webFriendlyName'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['productCode'] === null) {
            $invalidProperties[] = "'productCode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description TODO - WYSIWYG / Rich Text field migration
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets productCode
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string $productCode productCode
     *
     * @return $this
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets publishToWeb
     *
     * @return bool
     */
    public function getPublishToWeb()
    {
        return $this->container['publishToWeb'];
    }

    /**
     * Sets publishToWeb
     *
     * @param bool $publishToWeb publishToWeb
     *
     * @return $this
     */
    public function setPublishToWeb($publishToWeb)
    {
        $this->container['publishToWeb'] = $publishToWeb;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets disableQuantityDiscount
     *
     * @return bool
     */
    public function getDisableQuantityDiscount()
    {
        return $this->container['disableQuantityDiscount'];
    }

    /**
     * Sets disableQuantityDiscount
     *
     * @param bool $disableQuantityDiscount Not sure how this differs from discountAllowed. May need to get clarification.
     *
     * @return $this
     */
    public function setDisableQuantityDiscount($disableQuantityDiscount)
    {
        $this->container['disableQuantityDiscount'] = $disableQuantityDiscount;

        return $this;
    }

    /**
     * Gets discountAllowed
     *
     * @return bool
     */
    public function getDiscountAllowed()
    {
        return $this->container['discountAllowed'];
    }

    /**
     * Sets discountAllowed
     *
     * @param bool $discountAllowed Not sure how this differs from disableQuantityDiscount. May need to get clarification.
     *
     * @return $this
     */
    public function setDiscountAllowed($discountAllowed)
    {
        $this->container['discountAllowed'] = $discountAllowed;

        return $this;
    }

    /**
     * Gets returnable
     *
     * @return bool
     */
    public function getReturnable()
    {
        return $this->container['returnable'];
    }

    /**
     * Sets returnable
     *
     * @param bool $returnable returnable
     *
     * @return $this
     */
    public function setReturnable($returnable)
    {
        $this->container['returnable'] = $returnable;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool $taxable taxable
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets allowSkirt
     *
     * @return bool
     */
    public function getAllowSkirt()
    {
        return $this->container['allowSkirt'];
    }

    /**
     * Sets allowSkirt
     *
     * @param bool $allowSkirt allowSkirt
     *
     * @return $this
     */
    public function setAllowSkirt($allowSkirt)
    {
        $this->container['allowSkirt'] = $allowSkirt;

        return $this;
    }

    /**
     * Gets customerSpecific
     *
     * @return bool
     */
    public function getCustomerSpecific()
    {
        return $this->container['customerSpecific'];
    }

    /**
     * Sets customerSpecific
     *
     * @param bool $customerSpecific customerSpecific
     *
     * @return $this
     */
    public function setCustomerSpecific($customerSpecific)
    {
        $this->container['customerSpecific'] = $customerSpecific;

        return $this;
    }

    /**
     * Gets seoTitle
     *
     * @return string
     */
    public function getSeoTitle()
    {
        return $this->container['seoTitle'];
    }

    /**
     * Sets seoTitle
     *
     * @param string $seoTitle Used for initial import only
     *
     * @return $this
     */
    public function setSeoTitle($seoTitle)
    {
        $this->container['seoTitle'] = $seoTitle;

        return $this;
    }

    /**
     * Gets seoKeywords
     *
     * @return string
     */
    public function getSeoKeywords()
    {
        return $this->container['seoKeywords'];
    }

    /**
     * Sets seoKeywords
     *
     * @param string $seoKeywords Used for initial import only
     *
     * @return $this
     */
    public function setSeoKeywords($seoKeywords)
    {
        $this->container['seoKeywords'] = $seoKeywords;

        return $this;
    }

    /**
     * Gets seoDescription
     *
     * @return string
     */
    public function getSeoDescription()
    {
        return $this->container['seoDescription'];
    }

    /**
     * Sets seoDescription
     *
     * @param string $seoDescription Used for initial import only
     *
     * @return $this
     */
    public function setSeoDescription($seoDescription)
    {
        $this->container['seoDescription'] = $seoDescription;

        return $this;
    }

    /**
     * Gets webFriendlyName
     *
     * @return string
     */
    public function getWebFriendlyName()
    {
        return $this->container['webFriendlyName'];
    }

    /**
     * Sets webFriendlyName
     *
     * @param string $webFriendlyName Used for initial import only
     *
     * @return $this
     */
    public function setWebFriendlyName($webFriendlyName)
    {
        $this->container['webFriendlyName'] = $webFriendlyName;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt ISO 8601 format
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt ISO 8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


