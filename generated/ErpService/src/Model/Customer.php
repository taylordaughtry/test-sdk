<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Model;

use \ArrayAccess;
use \HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer extends \HappyCog\OsborneApi\Resources\Base\Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'email' => 'string',
        'emailOptIn' => 'bool',
        'billingAddressId' => 'int',
        'shippingCarrierId' => 'int',
        'buyingGroupId' => 'int',
        'nextBuyingGroupId' => 'int',
        'nextBuyingGroupGoal' => 'int',
        'freightTermsId' => 'int',
        'paymentTermId' => 'int',
        'taxZone' => 'string',
        'taxExempt' => 'bool',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'firstName' => null,
        'lastName' => null,
        'email' => null,
        'emailOptIn' => null,
        'billingAddressId' => null,
        'shippingCarrierId' => null,
        'buyingGroupId' => null,
        'nextBuyingGroupId' => null,
        'nextBuyingGroupGoal' => null,
        'freightTermsId' => null,
        'paymentTermId' => null,
        'taxZone' => null,
        'taxExempt' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'email' => 'email',
        'emailOptIn' => 'emailOptIn',
        'billingAddressId' => 'billingAddressId',
        'shippingCarrierId' => 'shippingCarrierId',
        'buyingGroupId' => 'buyingGroupId',
        'nextBuyingGroupId' => 'nextBuyingGroupId',
        'nextBuyingGroupGoal' => 'nextBuyingGroupGoal',
        'freightTermsId' => 'freightTermsId',
        'paymentTermId' => 'paymentTermId',
        'taxZone' => 'taxZone',
        'taxExempt' => 'taxExempt',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'email' => 'setEmail',
        'emailOptIn' => 'setEmailOptIn',
        'billingAddressId' => 'setBillingAddressId',
        'shippingCarrierId' => 'setShippingCarrierId',
        'buyingGroupId' => 'setBuyingGroupId',
        'nextBuyingGroupId' => 'setNextBuyingGroupId',
        'nextBuyingGroupGoal' => 'setNextBuyingGroupGoal',
        'freightTermsId' => 'setFreightTermsId',
        'paymentTermId' => 'setPaymentTermId',
        'taxZone' => 'setTaxZone',
        'taxExempt' => 'setTaxExempt',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'email' => 'getEmail',
        'emailOptIn' => 'getEmailOptIn',
        'billingAddressId' => 'getBillingAddressId',
        'shippingCarrierId' => 'getShippingCarrierId',
        'buyingGroupId' => 'getBuyingGroupId',
        'nextBuyingGroupId' => 'getNextBuyingGroupId',
        'nextBuyingGroupGoal' => 'getNextBuyingGroupGoal',
        'freightTermsId' => 'getFreightTermsId',
        'paymentTermId' => 'getPaymentTermId',
        'taxZone' => 'getTaxZone',
        'taxExempt' => 'getTaxExempt',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['emailOptIn'] = isset($data['emailOptIn']) ? $data['emailOptIn'] : true;
        $this->container['billingAddressId'] = isset($data['billingAddressId']) ? $data['billingAddressId'] : null;
        $this->container['shippingCarrierId'] = isset($data['shippingCarrierId']) ? $data['shippingCarrierId'] : null;
        $this->container['buyingGroupId'] = isset($data['buyingGroupId']) ? $data['buyingGroupId'] : null;
        $this->container['nextBuyingGroupId'] = isset($data['nextBuyingGroupId']) ? $data['nextBuyingGroupId'] : null;
        $this->container['nextBuyingGroupGoal'] = isset($data['nextBuyingGroupGoal']) ? $data['nextBuyingGroupGoal'] : null;
        $this->container['freightTermsId'] = isset($data['freightTermsId']) ? $data['freightTermsId'] : null;
        $this->container['paymentTermId'] = isset($data['paymentTermId']) ? $data['paymentTermId'] : null;
        $this->container['taxZone'] = isset($data['taxZone']) ? $data['taxZone'] : null;
        $this->container['taxExempt'] = isset($data['taxExempt']) ? $data['taxExempt'] : false;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName firstName
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName lastName
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailOptIn
     *
     * @return bool
     */
    public function getEmailOptIn()
    {
        return $this->container['emailOptIn'];
    }

    /**
     * Sets emailOptIn
     *
     * @param bool $emailOptIn emailOptIn
     *
     * @return $this
     */
    public function setEmailOptIn($emailOptIn)
    {
        $this->container['emailOptIn'] = $emailOptIn;

        return $this;
    }

    /**
     * Gets billingAddressId
     *
     * @return int
     */
    public function getBillingAddressId()
    {
        return $this->container['billingAddressId'];
    }

    /**
     * Sets billingAddressId
     *
     * @param int $billingAddressId billingAddressId
     *
     * @return $this
     */
    public function setBillingAddressId($billingAddressId)
    {
        $this->container['billingAddressId'] = $billingAddressId;

        return $this;
    }

    /**
     * Gets shippingCarrierId
     *
     * @return int
     */
    public function getShippingCarrierId()
    {
        return $this->container['shippingCarrierId'];
    }

    /**
     * Sets shippingCarrierId
     *
     * @param int $shippingCarrierId shippingCarrierId
     *
     * @return $this
     */
    public function setShippingCarrierId($shippingCarrierId)
    {
        $this->container['shippingCarrierId'] = $shippingCarrierId;

        return $this;
    }

    /**
     * Gets buyingGroupId
     *
     * @return int
     */
    public function getBuyingGroupId()
    {
        return $this->container['buyingGroupId'];
    }

    /**
     * Sets buyingGroupId
     *
     * @param int $buyingGroupId buyingGroupId
     *
     * @return $this
     */
    public function setBuyingGroupId($buyingGroupId)
    {
        $this->container['buyingGroupId'] = $buyingGroupId;

        return $this;
    }

    /**
     * Gets nextBuyingGroupId
     *
     * @return int
     */
    public function getNextBuyingGroupId()
    {
        return $this->container['nextBuyingGroupId'];
    }

    /**
     * Sets nextBuyingGroupId
     *
     * @param int $nextBuyingGroupId nextBuyingGroupId
     *
     * @return $this
     */
    public function setNextBuyingGroupId($nextBuyingGroupId)
    {
        $this->container['nextBuyingGroupId'] = $nextBuyingGroupId;

        return $this;
    }

    /**
     * Gets nextBuyingGroupGoal
     *
     * @return int
     */
    public function getNextBuyingGroupGoal()
    {
        return $this->container['nextBuyingGroupGoal'];
    }

    /**
     * Sets nextBuyingGroupGoal
     *
     * @param int $nextBuyingGroupGoal nextBuyingGroupGoal
     *
     * @return $this
     */
    public function setNextBuyingGroupGoal($nextBuyingGroupGoal)
    {
        $this->container['nextBuyingGroupGoal'] = $nextBuyingGroupGoal;

        return $this;
    }

    /**
     * Gets freightTermsId
     *
     * @return int
     */
    public function getFreightTermsId()
    {
        return $this->container['freightTermsId'];
    }

    /**
     * Sets freightTermsId
     *
     * @param int $freightTermsId freightTermsId
     *
     * @return $this
     */
    public function setFreightTermsId($freightTermsId)
    {
        $this->container['freightTermsId'] = $freightTermsId;

        return $this;
    }

    /**
     * Gets paymentTermId
     *
     * @return int
     */
    public function getPaymentTermId()
    {
        return $this->container['paymentTermId'];
    }

    /**
     * Sets paymentTermId
     *
     * @param int $paymentTermId Used for initial import only
     *
     * @return $this
     */
    public function setPaymentTermId($paymentTermId)
    {
        $this->container['paymentTermId'] = $paymentTermId;

        return $this;
    }

    /**
     * Gets taxZone
     *
     * @return string
     */
    public function getTaxZone()
    {
        return $this->container['taxZone'];
    }

    /**
     * Sets taxZone
     *
     * @param string $taxZone Used for initial import only
     *
     * @return $this
     */
    public function setTaxZone($taxZone)
    {
        $this->container['taxZone'] = $taxZone;

        return $this;
    }

    /**
     * Gets taxExempt
     *
     * @return bool
     */
    public function getTaxExempt()
    {
        return $this->container['taxExempt'];
    }

    /**
     * Sets taxExempt
     *
     * @param bool $taxExempt Used for initial import only
     *
     * @return $this
     */
    public function setTaxExempt($taxExempt)
    {
        $this->container['taxExempt'] = $taxExempt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt ISO 8601 format
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt ISO 8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


