<?php
/**
 * PromotionsApi
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HappyCog\OsborneApi\ErpService\ApiException;
use HappyCog\OsborneApi\ErpService\Configuration;
use HappyCog\OsborneApi\ErpService\HeaderSelector;
use HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * PromotionsApi Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionsApi extends \HappyCog\OsborneApi\Resources\Base\ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        parent::__construct();

        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation definitions available for this API endpoint
     *
     * @var array
     */
    protected $operationDefinitions = [
        'promotionsGet' => [
            'path' => '/promotions',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'promotionsPromotionIdCustomersGet' => [
            'path' => '/promotions/{promotionId}/customers',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'promotionsPromotionIdGet' => [
            'path' => '/promotions/{promotionId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'promotionsPromotionIdProductsGet' => [
            'path' => '/promotions/{promotionId}/products',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'promotionsPromotionIdProductsPromotionProductIdGet' => [
            'path' => '/promotions/{promotionId}/products/{promotionProductId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'promotionsPromotionIdShippingMethodsGet' => [
            'path' => '/promotions/{promotionId}/shipping-methods',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
    ];

    /**
     * Operation promotionsGet
     *
     * Get a list of Promotions
     *
     * Usage: Promotion::all()
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion[]
     */
    public function promotionsGet()
    {
        list($response) = $this->promotionsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation promotionsGetWithHttpInfo
     *
     * Get a list of Promotions
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsGetWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion[]';
        $request = $this->promotionsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsGetAsync
     *
     * Get a list of Promotions
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsGetAsync()
    {
        return $this->promotionsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsGetAsyncWithHttpInfo
     *
     * Get a list of Promotions
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsGetAsyncWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion[]';
        $request = $this->promotionsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsGet'
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsGetRequest()
    {

        $resourcePath = '/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdCustomersGet
     *
     * Get a list of Customers associated with the Promotion
     *
     * Usage: Promotion::find(123)->customers
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]
     */
    public function promotionsPromotionIdCustomersGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdCustomersGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdCustomersGetWithHttpInfo
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdCustomersGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]';
        $request = $this->promotionsPromotionIdCustomersGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdCustomersGetAsync
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdCustomersGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdCustomersGetAsyncWithHttpInfo
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]';
        $request = $this->promotionsPromotionIdCustomersGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdCustomersGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdCustomersGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdCustomersGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdGet
     *
     * Get info about a Promotion
     *
     * Usage: Promotion::find(123)
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion
     */
    public function promotionsPromotionIdGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdGetWithHttpInfo
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdGetAsync
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdGetAsyncWithHttpInfo
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsGet
     *
     * Used for initial import only  Get a list of Products for a Promotion
     *
     * Usage: Promotion::find(123)->products
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]
     */
    public function promotionsPromotionIdProductsGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdProductsGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsGetWithHttpInfo
     *
     * Used for initial import only  Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]';
        $request = $this->promotionsPromotionIdProductsGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsGetAsync
     *
     * Used for initial import only  Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdProductsGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsGetAsyncWithHttpInfo
     *
     * Used for initial import only  Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]';
        $request = $this->promotionsPromotionIdProductsGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGet
     *
     * Used for initial import only  Get info about a Product for a Promotion
     *
     * Usage: Promotion::find(123)->products(123)
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct
     */
    public function promotionsPromotionIdProductsPromotionProductIdGet($promotionId, $promotionProductId)
    {
        list($response) = $this->promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo($promotionId, $promotionProductId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo
     *
     * Used for initial import only  Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetAsync
     *
     * Used for initial import only  Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetAsync($promotionId, $promotionProductId)
    {
        return $this->promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo($promotionId, $promotionProductId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo
     *
     * Used for initial import only  Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsPromotionProductIdGet'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsPromotionProductIdGet'
            );
        }
        // verify the required parameter 'promotionProductId' is set
        if ($promotionProductId === null || (is_array($promotionProductId) && count($promotionProductId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionProductId when calling promotionsPromotionIdProductsPromotionProductIdGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products/{promotionProductId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($promotionProductId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionProductId' . '}',
                ObjectSerializer::toPathValue($promotionProductId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGet
     *
     * Used for initial import only  Get a list of Shipping Methods associated with the Promotion
     *
     * Usage: Promotion::find(123)->shippingMethods
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]
     */
    public function promotionsPromotionIdShippingMethodsGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdShippingMethodsGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetWithHttpInfo
     *
     * Used for initial import only  Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdShippingMethodsGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]';
        $request = $this->promotionsPromotionIdShippingMethodsGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetAsync
     *
     * Used for initial import only  Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo
     *
     * Used for initial import only  Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]';
        $request = $this->promotionsPromotionIdShippingMethodsGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdShippingMethodsGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdShippingMethodsGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdShippingMethodsGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/shipping-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
