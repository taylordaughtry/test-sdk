<?php
/**
 * PromotionsApi
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HappyCog\OsborneApi\ErpService\ApiException;
use HappyCog\OsborneApi\ErpService\Configuration;
use HappyCog\OsborneApi\ErpService\HeaderSelector;
use HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * PromotionsApi Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionsApi extends \HappyCog\OsborneApi\Resources\Base\ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation promotionsGet
     *
     * Get a list of Promotions
     *
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion[]
     */
    public function promotionsGet()
    {
        list($response) = $this->promotionsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation promotionsGetWithHttpInfo
     *
     * Get a list of Promotions
     *
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsGetWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion[]';
        $request = $this->promotionsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsGetAsync
     *
     * Get a list of Promotions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsGetAsync()
    {
        return $this->promotionsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsGetAsyncWithHttpInfo
     *
     * Get a list of Promotions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsGetAsyncWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion[]';
        $request = $this->promotionsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsGetRequest()
    {

        $resourcePath = '/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPost
     *
     * Create a new Promotion
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion
     */
    public function promotionsPost($body = null)
    {
        list($response) = $this->promotionsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation promotionsPostWithHttpInfo
     *
     * Create a new Promotion
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPostWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPostAsync
     *
     * Create a new Promotion
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPostAsync($body = null)
    {
        return $this->promotionsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPostAsyncWithHttpInfo
     *
     * Create a new Promotion
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPost'
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPostRequest($body = null)
    {

        $resourcePath = '/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdCustomersCustomerIdDeletePost
     *
     * Remove a Customer association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $customerId Customer Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function promotionsPromotionIdCustomersCustomerIdDeletePost($promotionId, $customerId)
    {
        list($response) = $this->promotionsPromotionIdCustomersCustomerIdDeletePostWithHttpInfo($promotionId, $customerId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdCustomersCustomerIdDeletePostWithHttpInfo
     *
     * Remove a Customer association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $customerId Customer Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdCustomersCustomerIdDeletePostWithHttpInfo($promotionId, $customerId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdCustomersCustomerIdDeletePostRequest($promotionId, $customerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdCustomersCustomerIdDeletePostAsync
     *
     * Remove a Customer association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $customerId Customer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersCustomerIdDeletePostAsync($promotionId, $customerId)
    {
        return $this->promotionsPromotionIdCustomersCustomerIdDeletePostAsyncWithHttpInfo($promotionId, $customerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdCustomersCustomerIdDeletePostAsyncWithHttpInfo
     *
     * Remove a Customer association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $customerId Customer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersCustomerIdDeletePostAsyncWithHttpInfo($promotionId, $customerId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdCustomersCustomerIdDeletePostRequest($promotionId, $customerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdCustomersCustomerIdDeletePost'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $customerId Customer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdCustomersCustomerIdDeletePostRequest($promotionId, $customerId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdCustomersCustomerIdDeletePost'
            );
        }
        // verify the required parameter 'customerId' is set
        if ($customerId === null || (is_array($customerId) && count($customerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerId when calling promotionsPromotionIdCustomersCustomerIdDeletePost'
            );
        }

        $resourcePath = '/promotions/{promotionId}/customers/{customerId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($customerId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdCustomersGet
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]
     */
    public function promotionsPromotionIdCustomersGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdCustomersGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdCustomersGetWithHttpInfo
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdCustomersGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]';
        $request = $this->promotionsPromotionIdCustomersGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdCustomersGetAsync
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdCustomersGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdCustomersGetAsyncWithHttpInfo
     *
     * Get a list of Customers associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer[]';
        $request = $this->promotionsPromotionIdCustomersGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdCustomersGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdCustomersGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdCustomersGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdCustomersPost
     *
     * Create a Customer association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer
     */
    public function promotionsPromotionIdCustomersPost($promotionId, $body = null)
    {
        list($response) = $this->promotionsPromotionIdCustomersPostWithHttpInfo($promotionId, $body);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdCustomersPostWithHttpInfo
     *
     * Create a Customer association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdCustomersPostWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer';
        $request = $this->promotionsPromotionIdCustomersPostRequest($promotionId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdCustomersPostAsync
     *
     * Create a Customer association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersPostAsync($promotionId, $body = null)
    {
        return $this->promotionsPromotionIdCustomersPostAsyncWithHttpInfo($promotionId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdCustomersPostAsyncWithHttpInfo
     *
     * Create a Customer association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdCustomersPostAsyncWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionCustomer';
        $request = $this->promotionsPromotionIdCustomersPostRequest($promotionId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdCustomersPost'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionCustomer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdCustomersPostRequest($promotionId, $body = null)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdCustomersPost'
            );
        }

        $resourcePath = '/promotions/{promotionId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdDeleteDelete
     *
     * Delete a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function promotionsPromotionIdDeleteDelete($promotionId)
    {
        list($response) = $this->promotionsPromotionIdDeleteDeleteWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdDeleteDeleteWithHttpInfo
     *
     * Delete a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdDeleteDeleteWithHttpInfo($promotionId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdDeleteDeleteRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdDeleteDeleteAsync
     *
     * Delete a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdDeleteDeleteAsync($promotionId)
    {
        return $this->promotionsPromotionIdDeleteDeleteAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdDeleteDeleteAsyncWithHttpInfo
     *
     * Delete a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdDeleteDeleteAsyncWithHttpInfo($promotionId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdDeleteDeleteRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdDeleteDelete'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdDeleteDeleteRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdDeleteDelete'
            );
        }

        $resourcePath = '/promotions/{promotionId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdGet
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion
     */
    public function promotionsPromotionIdGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdGetWithHttpInfo
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdGetAsync
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdGetAsyncWithHttpInfo
     *
     * Get info about a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsGet
     *
     * Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]
     */
    public function promotionsPromotionIdProductsGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdProductsGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsGetWithHttpInfo
     *
     * Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]';
        $request = $this->promotionsPromotionIdProductsGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsGetAsync
     *
     * Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdProductsGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsGetAsyncWithHttpInfo
     *
     * Get a list of Products for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct[]';
        $request = $this->promotionsPromotionIdProductsGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsPost
     *
     * Create a new Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct
     */
    public function promotionsPromotionIdProductsPost($promotionId, $body = null)
    {
        list($response) = $this->promotionsPromotionIdProductsPostWithHttpInfo($promotionId, $body);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsPostWithHttpInfo
     *
     * Create a new Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsPostWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPostRequest($promotionId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsPostAsync
     *
     * Create a new Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPostAsync($promotionId, $body = null)
    {
        return $this->promotionsPromotionIdProductsPostAsyncWithHttpInfo($promotionId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsPostAsyncWithHttpInfo
     *
     * Create a new Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPostAsyncWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPostRequest($promotionId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsPost'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsPostRequest($promotionId, $body = null)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsPost'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdDeleteDelete
     *
     * Delete a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function promotionsPromotionIdProductsPromotionProductIdDeleteDelete($promotionId, $promotionProductId)
    {
        list($response) = $this->promotionsPromotionIdProductsPromotionProductIdDeleteDeleteWithHttpInfo($promotionId, $promotionProductId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdDeleteDeleteWithHttpInfo
     *
     * Delete a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsPromotionProductIdDeleteDeleteWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdDeleteDeleteRequest($promotionId, $promotionProductId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdDeleteDeleteAsync
     *
     * Delete a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdDeleteDeleteAsync($promotionId, $promotionProductId)
    {
        return $this->promotionsPromotionIdProductsPromotionProductIdDeleteDeleteAsyncWithHttpInfo($promotionId, $promotionProductId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdDeleteDeleteAsyncWithHttpInfo
     *
     * Delete a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdDeleteDeleteAsyncWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdDeleteDeleteRequest($promotionId, $promotionProductId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsPromotionProductIdDeleteDelete'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsPromotionProductIdDeleteDeleteRequest($promotionId, $promotionProductId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsPromotionProductIdDeleteDelete'
            );
        }
        // verify the required parameter 'promotionProductId' is set
        if ($promotionProductId === null || (is_array($promotionProductId) && count($promotionProductId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionProductId when calling promotionsPromotionIdProductsPromotionProductIdDeleteDelete'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products/{promotionProductId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($promotionProductId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionProductId' . '}',
                ObjectSerializer::toPathValue($promotionProductId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGet
     *
     * Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct
     */
    public function promotionsPromotionIdProductsPromotionProductIdGet($promotionId, $promotionProductId)
    {
        list($response) = $this->promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo($promotionId, $promotionProductId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo
     *
     * Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetAsync
     *
     * Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetAsync($promotionId, $promotionProductId)
    {
        return $this->promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo($promotionId, $promotionProductId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo
     *
     * Get info about a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdGetAsyncWithHttpInfo($promotionId, $promotionProductId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsPromotionProductIdGet'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsPromotionProductIdGetRequest($promotionId, $promotionProductId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsPromotionProductIdGet'
            );
        }
        // verify the required parameter 'promotionProductId' is set
        if ($promotionProductId === null || (is_array($promotionProductId) && count($promotionProductId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionProductId when calling promotionsPromotionIdProductsPromotionProductIdGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products/{promotionProductId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($promotionProductId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionProductId' . '}',
                ObjectSerializer::toPathValue($promotionProductId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdPut
     *
     * Update a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionProduct
     */
    public function promotionsPromotionIdProductsPromotionProductIdPut($promotionId, $promotionProductId, $body = null)
    {
        list($response) = $this->promotionsPromotionIdProductsPromotionProductIdPutWithHttpInfo($promotionId, $promotionProductId, $body);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdPutWithHttpInfo
     *
     * Update a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdProductsPromotionProductIdPutWithHttpInfo($promotionId, $promotionProductId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdPutRequest($promotionId, $promotionProductId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdPutAsync
     *
     * Update a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdPutAsync($promotionId, $promotionProductId, $body = null)
    {
        return $this->promotionsPromotionIdProductsPromotionProductIdPutAsyncWithHttpInfo($promotionId, $promotionProductId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdProductsPromotionProductIdPutAsyncWithHttpInfo
     *
     * Update a Product for a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdProductsPromotionProductIdPutAsyncWithHttpInfo($promotionId, $promotionProductId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionProduct';
        $request = $this->promotionsPromotionIdProductsPromotionProductIdPutRequest($promotionId, $promotionProductId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdProductsPromotionProductIdPut'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $promotionProductId Promotion Product Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionProduct $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdProductsPromotionProductIdPutRequest($promotionId, $promotionProductId, $body = null)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdProductsPromotionProductIdPut'
            );
        }
        // verify the required parameter 'promotionProductId' is set
        if ($promotionProductId === null || (is_array($promotionProductId) && count($promotionProductId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionProductId when calling promotionsPromotionIdProductsPromotionProductIdPut'
            );
        }

        $resourcePath = '/promotions/{promotionId}/products/{promotionProductId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($promotionProductId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionProductId' . '}',
                ObjectSerializer::toPathValue($promotionProductId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdPut
     *
     * Update a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\Promotion
     */
    public function promotionsPromotionIdPut($promotionId, $body = null)
    {
        list($response) = $this->promotionsPromotionIdPutWithHttpInfo($promotionId, $body);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdPutWithHttpInfo
     *
     * Update a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Promotion, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdPutWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdPutRequest($promotionId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Promotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdPutAsync
     *
     * Update a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdPutAsync($promotionId, $body = null)
    {
        return $this->promotionsPromotionIdPutAsyncWithHttpInfo($promotionId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdPutAsyncWithHttpInfo
     *
     * Update a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdPutAsyncWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Promotion';
        $request = $this->promotionsPromotionIdPutRequest($promotionId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdPut'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Promotion $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdPutRequest($promotionId, $body = null)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdPut'
            );
        }

        $resourcePath = '/promotions/{promotionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGet
     *
     * Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]
     */
    public function promotionsPromotionIdShippingMethodsGet($promotionId)
    {
        list($response) = $this->promotionsPromotionIdShippingMethodsGetWithHttpInfo($promotionId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetWithHttpInfo
     *
     * Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdShippingMethodsGetWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]';
        $request = $this->promotionsPromotionIdShippingMethodsGetRequest($promotionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetAsync
     *
     * Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsGetAsync($promotionId)
    {
        return $this->promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo($promotionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo
     *
     * Get a list of Shipping Methods associated with the Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsGetAsyncWithHttpInfo($promotionId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod[]';
        $request = $this->promotionsPromotionIdShippingMethodsGetRequest($promotionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdShippingMethodsGet'
     *
     * @param  int $promotionId Promotion Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdShippingMethodsGetRequest($promotionId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdShippingMethodsGet'
            );
        }

        $resourcePath = '/promotions/{promotionId}/shipping-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsPost
     *
     * Create a Shipping Method association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod
     */
    public function promotionsPromotionIdShippingMethodsPost($promotionId, $body = null)
    {
        list($response) = $this->promotionsPromotionIdShippingMethodsPostWithHttpInfo($promotionId, $body);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsPostWithHttpInfo
     *
     * Create a Shipping Method association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdShippingMethodsPostWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod';
        $request = $this->promotionsPromotionIdShippingMethodsPostRequest($promotionId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsPostAsync
     *
     * Create a Shipping Method association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsPostAsync($promotionId, $body = null)
    {
        return $this->promotionsPromotionIdShippingMethodsPostAsyncWithHttpInfo($promotionId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsPostAsyncWithHttpInfo
     *
     * Create a Shipping Method association with a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsPostAsyncWithHttpInfo($promotionId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod';
        $request = $this->promotionsPromotionIdShippingMethodsPostRequest($promotionId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdShippingMethodsPost'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\PromotionShippingMethod $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdShippingMethodsPostRequest($promotionId, $body = null)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdShippingMethodsPost'
            );
        }

        $resourcePath = '/promotions/{promotionId}/shipping-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsShippingMethodIdDeletePost
     *
     * Remove a Shipping Method association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $shippingMethodId Shipping Method Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function promotionsPromotionIdShippingMethodsShippingMethodIdDeletePost($promotionId, $shippingMethodId)
    {
        list($response) = $this->promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostWithHttpInfo($promotionId, $shippingMethodId);
        return $response;
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostWithHttpInfo
     *
     * Remove a Shipping Method association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $shippingMethodId Shipping Method Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostWithHttpInfo($promotionId, $shippingMethodId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostRequest($promotionId, $shippingMethodId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostAsync
     *
     * Remove a Shipping Method association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $shippingMethodId Shipping Method Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostAsync($promotionId, $shippingMethodId)
    {
        return $this->promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostAsyncWithHttpInfo($promotionId, $shippingMethodId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostAsyncWithHttpInfo
     *
     * Remove a Shipping Method association from a Promotion
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $shippingMethodId Shipping Method Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostAsyncWithHttpInfo($promotionId, $shippingMethodId)
    {
        $returnType = 'object';
        $request = $this->promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostRequest($promotionId, $shippingMethodId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionsPromotionIdShippingMethodsShippingMethodIdDeletePost'
     *
     * @param  int $promotionId Promotion Id (required)
     * @param  int $shippingMethodId Shipping Method Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionsPromotionIdShippingMethodsShippingMethodIdDeletePostRequest($promotionId, $shippingMethodId)
    {
        // verify the required parameter 'promotionId' is set
        if ($promotionId === null || (is_array($promotionId) && count($promotionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionId when calling promotionsPromotionIdShippingMethodsShippingMethodIdDeletePost'
            );
        }
        // verify the required parameter 'shippingMethodId' is set
        if ($shippingMethodId === null || (is_array($shippingMethodId) && count($shippingMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shippingMethodId when calling promotionsPromotionIdShippingMethodsShippingMethodIdDeletePost'
            );
        }

        $resourcePath = '/promotions/{promotionId}/shipping-methods/{shippingMethodId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotionId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotionId),
                $resourcePath
            );
        }
        // path params
        if ($shippingMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shippingMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
