<?php
/**
 * OrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Osborne ERP Service API
 *
 * This specification outlines an ideal API built on the Osborne ERP that will provide an integraion for Craft CMS at osbornewood.com
 *
 * OpenAPI spec version: 1.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HappyCog\OsborneApi\ErpService\ApiException;
use HappyCog\OsborneApi\ErpService\Configuration;
use HappyCog\OsborneApi\ErpService\HeaderSelector;
use HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrdersApi extends \HappyCog\OsborneApi\Resources\Base\ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        parent::__construct();

        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation definitions available for this API endpoint
     *
     * @var array
     */
    protected $operationDefinitions = [
        'ordersGet' => [
            'path' => '/orders',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdDelete' => [
            'path' => '/orders/{orderId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdFilesPost' => [
            'path' => '/orders/{orderId}/files',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderFile',
        ],
        'ordersOrderIdGet' => [
            'path' => '/orders/{orderId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdLinesGet' => [
            'path' => '/orders/{orderId}/lines',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdDelete' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdGet' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdPut' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderLine',
        ],
        'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService',
        ],
        'ordersOrderIdLinesOrderLineIdServicesGet' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}/services',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdLinesOrderLineIdServicesPost' => [
            'path' => '/orders/{orderId}/lines/{orderLineId}/services',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService',
        ],
        'ordersOrderIdLinesPost' => [
            'path' => '/orders/{orderId}/lines',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderLine',
        ],
        'ordersOrderIdNotesGet' => [
            'path' => '/orders/{orderId}/notes',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdNotesOrderNoteIdDelete' => [
            'path' => '/orders/{orderId}/notes/{orderNoteId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdNotesOrderNoteIdGet' => [
            'path' => '/orders/{orderId}/notes/{orderNoteId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdNotesOrderNoteIdPut' => [
            'path' => '/orders/{orderId}/notes/{orderNoteId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderNote',
        ],
        'ordersOrderIdNotesPost' => [
            'path' => '/orders/{orderId}/notes',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderNote',
        ],
        'ordersOrderIdPackagesGet' => [
            'path' => '/orders/{orderId}/packages',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdPackagesOrderPackageIdGet' => [
            'path' => '/orders/{orderId}/packages/{orderPackageId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdPaymentsGet' => [
            'path' => '/orders/{orderId}/payments',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdPaymentsOrderPaymentIdDelete' => [
            'path' => '/orders/{orderId}/payments/{orderPaymentId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdPaymentsOrderPaymentIdGet' => [
            'path' => '/orders/{orderId}/payments/{orderPaymentId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdPaymentsOrderPaymentIdPut' => [
            'path' => '/orders/{orderId}/payments/{orderPaymentId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderPayment',
        ],
        'ordersOrderIdPaymentsPost' => [
            'path' => '/orders/{orderId}/payments',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\OrderPayment',
        ],
        'ordersOrderIdPut' => [
            'path' => '/orders/{orderId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Order',
        ],
        'ordersOrderIdServicesAppliedOrderServiceIdDelete' => [
            'path' => '/orders/{orderId}/services/{appliedOrderServiceId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdServicesAppliedOrderServiceIdGet' => [
            'path' => '/orders/{orderId}/services/{appliedOrderServiceId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'ordersOrderIdServicesAppliedOrderServiceIdPut' => [
            'path' => '/orders/{orderId}/services/{appliedOrderServiceId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService',
        ],
        'ordersOrderIdServicesGet' => [
            'path' => '/orders/{orderId}/services',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'ordersOrderIdServicesPost' => [
            'path' => '/orders/{orderId}/services',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService',
        ],
        'ordersPost' => [
            'path' => '/orders',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Order',
        ],
    ];

    /**
     * Operation ordersGet
     *
     * Get a list of Orders
     *
     * Usage: Order::all()
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Order[]
     */
    public function ordersGet()
    {
        list($response) = $this->ordersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation ordersGetWithHttpInfo
     *
     * Get a list of Orders
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Order[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersGetWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order[]';
        $request = $this->ordersGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Order[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersGetAsync
     *
     * Get a list of Orders
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsync()
    {
        return $this->ordersGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersGetAsyncWithHttpInfo
     *
     * Get a list of Orders
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsyncWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order[]';
        $request = $this->ordersGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersGet'
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersGetRequest()
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdDelete
     *
     * Void an Order
     *
     * Usage: Order::find(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdDelete($orderId)
    {
        list($response) = $this->ordersOrderIdDeleteWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdDeleteWithHttpInfo
     *
     * Void an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdDeleteWithHttpInfo($orderId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdDeleteRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdDeleteAsync
     *
     * Void an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdDeleteAsync($orderId)
    {
        return $this->ordersOrderIdDeleteAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdDeleteAsyncWithHttpInfo
     *
     * Void an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdDeleteAsyncWithHttpInfo($orderId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdDeleteRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdDelete'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdDeleteRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdFilesPost
     *
     * Create a new File for an Order
     *
     * Usage: Order::find(123)->files->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderFile $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderFile
     */
    public function ordersOrderIdFilesPost($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdFilesPostWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdFilesPostWithHttpInfo
     *
     * Create a new File for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderFile $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderFile, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdFilesPostWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderFile';
        $request = $this->ordersOrderIdFilesPostRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdFilesPostAsync
     *
     * Create a new File for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderFile $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdFilesPostAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdFilesPostAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdFilesPostAsyncWithHttpInfo
     *
     * Create a new File for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderFile $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdFilesPostAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderFile';
        $request = $this->ordersOrderIdFilesPostRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdFilesPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderFile $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdFilesPostRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdFilesPost'
            );
        }

        $resourcePath = '/orders/{orderId}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdGet
     *
     * Get info about an Order
     *
     * Usage: Order::find(123)
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Order
     */
    public function ordersOrderIdGet($orderId)
    {
        list($response) = $this->ordersOrderIdGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdGetWithHttpInfo
     *
     * Get info about an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersOrderIdGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdGetAsync
     *
     * Get info about an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdGetAsync($orderId)
    {
        return $this->ordersOrderIdGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdGetAsyncWithHttpInfo
     *
     * Get info about an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersOrderIdGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesGet
     *
     * Get a list of Lines for an Order
     *
     * Usage: Order::find(123)->lines
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderLine[]
     */
    public function ordersOrderIdLinesGet($orderId)
    {
        list($response) = $this->ordersOrderIdLinesGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesGetWithHttpInfo
     *
     * Get a list of Lines for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine[]';
        $request = $this->ordersOrderIdLinesGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesGetAsync
     *
     * Get a list of Lines for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesGetAsync($orderId)
    {
        return $this->ordersOrderIdLinesGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesGetAsyncWithHttpInfo
     *
     * Get a list of Lines for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine[]';
        $request = $this->ordersOrderIdLinesGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesGet'
            );
        }

        $resourcePath = '/orders/{orderId}/lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdDelete
     *
     * Delete a Line for an Order
     *
     * Usage: Order::find(123)->lines(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdLinesOrderLineIdDelete($orderId, $orderLineId)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdDeleteWithHttpInfo($orderId, $orderLineId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdDeleteWithHttpInfo
     *
     * Delete a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdDeleteWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdLinesOrderLineIdDeleteRequest($orderId, $orderLineId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdDeleteAsync
     *
     * Delete a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdDeleteAsync($orderId, $orderLineId)
    {
        return $this->ordersOrderIdLinesOrderLineIdDeleteAsyncWithHttpInfo($orderId, $orderLineId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdDeleteAsyncWithHttpInfo
     *
     * Delete a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdDeleteAsyncWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdLinesOrderLineIdDeleteRequest($orderId, $orderLineId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdDelete'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdDeleteRequest($orderId, $orderLineId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdDelete'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdGet
     *
     * Get info about a Line for an Order
     *
     * Usage: Order::find(123)->lines(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderLine
     */
    public function ordersOrderIdLinesOrderLineIdGet($orderId, $orderLineId)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdGetWithHttpInfo($orderId, $orderLineId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdGetWithHttpInfo
     *
     * Get info about a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdGetWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesOrderLineIdGetRequest($orderId, $orderLineId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdGetAsync
     *
     * Get info about a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdGetAsync($orderId, $orderLineId)
    {
        return $this->ordersOrderIdLinesOrderLineIdGetAsyncWithHttpInfo($orderId, $orderLineId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdGetAsyncWithHttpInfo
     *
     * Get info about a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdGetAsyncWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesOrderLineIdGetRequest($orderId, $orderLineId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdGetRequest($orderId, $orderLineId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdGet'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdPut
     *
     * Update a Line for an Order
     *
     * Usage: Order::find(123)->lines(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderLine
     */
    public function ordersOrderIdLinesOrderLineIdPut($orderId, $orderLineId, $body = null)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdPutWithHttpInfo($orderId, $orderLineId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdPutWithHttpInfo
     *
     * Update a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdPutWithHttpInfo($orderId, $orderLineId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesOrderLineIdPutRequest($orderId, $orderLineId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdPutAsync
     *
     * Update a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdPutAsync($orderId, $orderLineId, $body = null)
    {
        return $this->ordersOrderIdLinesOrderLineIdPutAsyncWithHttpInfo($orderId, $orderLineId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdPutAsyncWithHttpInfo
     *
     * Update a Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdPutAsyncWithHttpInfo($orderId, $orderLineId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesOrderLineIdPutRequest($orderId, $orderLineId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdPutRequest($orderId, $orderLineId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdPut'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete
     *
     * Delete an Applied Product Service for an Order Line
     *
     * Usage: Order::find(123)->lines(123)->services(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete($orderId, $orderLineId, $appliedProductServiceId)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteWithHttpInfo
     *
     * Delete an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteRequest($orderId, $orderLineId, $appliedProductServiceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteAsync
     *
     * Delete an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteAsync($orderId, $orderLineId, $appliedProductServiceId)
    {
        return $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteAsyncWithHttpInfo
     *
     * Delete an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteRequest($orderId, $orderLineId, $appliedProductServiceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDeleteRequest($orderId, $orderLineId, $appliedProductServiceId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete'
            );
        }
        // verify the required parameter 'appliedProductServiceId' is set
        if ($appliedProductServiceId === null || (is_array($appliedProductServiceId) && count($appliedProductServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedProductServiceId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }
        // path params
        if ($appliedProductServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedProductServiceId' . '}',
                ObjectSerializer::toPathValue($appliedProductServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet
     *
     * Get info about an Applied Product Service for an Order Line
     *
     * Usage: Order::find(123)->lines(123)->services(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedProductService
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet($orderId, $orderLineId, $appliedProductServiceId)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetWithHttpInfo
     *
     * Get info about an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedProductService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetRequest($orderId, $orderLineId, $appliedProductServiceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetAsync
     *
     * Get info about an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetAsync($orderId, $orderLineId, $appliedProductServiceId)
    {
        return $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetAsyncWithHttpInfo
     *
     * Get info about an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetRequest($orderId, $orderLineId, $appliedProductServiceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGetRequest($orderId, $orderLineId, $appliedProductServiceId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet'
            );
        }
        // verify the required parameter 'appliedProductServiceId' is set
        if ($appliedProductServiceId === null || (is_array($appliedProductServiceId) && count($appliedProductServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedProductServiceId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }
        // path params
        if ($appliedProductServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedProductServiceId' . '}',
                ObjectSerializer::toPathValue($appliedProductServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut
     *
     * Update an Applied Product Service for an Order Line
     *
     * Usage: Order::find(123)->lines(123)->services(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedProductService
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut($orderId, $orderLineId, $appliedProductServiceId, $body = null)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutWithHttpInfo
     *
     * Update an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedProductService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutRequest($orderId, $orderLineId, $appliedProductServiceId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutAsync
     *
     * Update an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutAsync($orderId, $orderLineId, $appliedProductServiceId, $body = null)
    {
        return $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutAsyncWithHttpInfo
     *
     * Update an Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutAsyncWithHttpInfo($orderId, $orderLineId, $appliedProductServiceId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutRequest($orderId, $orderLineId, $appliedProductServiceId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  int $appliedProductServiceId Applied Product Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPutRequest($orderId, $orderLineId, $appliedProductServiceId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut'
            );
        }
        // verify the required parameter 'appliedProductServiceId' is set
        if ($appliedProductServiceId === null || (is_array($appliedProductServiceId) && count($appliedProductServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedProductServiceId when calling ordersOrderIdLinesOrderLineIdServicesAppliedProductServiceIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}/services/{appliedProductServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }
        // path params
        if ($appliedProductServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedProductServiceId' . '}',
                ObjectSerializer::toPathValue($appliedProductServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesGet
     *
     * Get a list of Applied Product Services for an Order Line
     *
     * Usage: Order::find(123)->lines(123)->services
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedProductService[]
     */
    public function ordersOrderIdLinesOrderLineIdServicesGet($orderId, $orderLineId)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdServicesGetWithHttpInfo($orderId, $orderLineId);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesGetWithHttpInfo
     *
     * Get a list of Applied Product Services for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedProductService[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdServicesGetWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService[]';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesGetRequest($orderId, $orderLineId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesGetAsync
     *
     * Get a list of Applied Product Services for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesGetAsync($orderId, $orderLineId)
    {
        return $this->ordersOrderIdLinesOrderLineIdServicesGetAsyncWithHttpInfo($orderId, $orderLineId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesGetAsyncWithHttpInfo
     *
     * Get a list of Applied Product Services for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesGetAsyncWithHttpInfo($orderId, $orderLineId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService[]';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesGetRequest($orderId, $orderLineId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdServicesGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdServicesGetRequest($orderId, $orderLineId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdServicesGet'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdServicesGet'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesPost
     *
     * Create a new Applied Product Service for an Order Line
     *
     * Usage: Order::find(123)->lines(123)->services->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedProductService
     */
    public function ordersOrderIdLinesOrderLineIdServicesPost($orderId, $orderLineId, $body = null)
    {
        list($response) = $this->ordersOrderIdLinesOrderLineIdServicesPostWithHttpInfo($orderId, $orderLineId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesPostWithHttpInfo
     *
     * Create a new Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedProductService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesOrderLineIdServicesPostWithHttpInfo($orderId, $orderLineId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesPostRequest($orderId, $orderLineId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesPostAsync
     *
     * Create a new Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesPostAsync($orderId, $orderLineId, $body = null)
    {
        return $this->ordersOrderIdLinesOrderLineIdServicesPostAsyncWithHttpInfo($orderId, $orderLineId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesOrderLineIdServicesPostAsyncWithHttpInfo
     *
     * Create a new Applied Product Service for an Order Line
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesOrderLineIdServicesPostAsyncWithHttpInfo($orderId, $orderLineId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedProductService';
        $request = $this->ordersOrderIdLinesOrderLineIdServicesPostRequest($orderId, $orderLineId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesOrderLineIdServicesPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderLineId Order Line Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedProductService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesOrderLineIdServicesPostRequest($orderId, $orderLineId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesOrderLineIdServicesPost'
            );
        }
        // verify the required parameter 'orderLineId' is set
        if ($orderLineId === null || (is_array($orderLineId) && count($orderLineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderLineId when calling ordersOrderIdLinesOrderLineIdServicesPost'
            );
        }

        $resourcePath = '/orders/{orderId}/lines/{orderLineId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderLineId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($orderLineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdLinesPost
     *
     * Create a new Line for an Order
     *
     * Usage: Order::find(123)->lines->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderLine
     */
    public function ordersOrderIdLinesPost($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdLinesPostWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdLinesPostWithHttpInfo
     *
     * Create a new Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdLinesPostWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesPostRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdLinesPostAsync
     *
     * Create a new Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesPostAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdLinesPostAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdLinesPostAsyncWithHttpInfo
     *
     * Create a new Line for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdLinesPostAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderLine';
        $request = $this->ordersOrderIdLinesPostRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdLinesPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderLine $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdLinesPostRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdLinesPost'
            );
        }

        $resourcePath = '/orders/{orderId}/lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdNotesGet
     *
     * Get a list of Notes for an Order
     *
     * Usage: Order::find(123)->notes
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderNote[]
     */
    public function ordersOrderIdNotesGet($orderId)
    {
        list($response) = $this->ordersOrderIdNotesGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotesGetWithHttpInfo
     *
     * Get a list of Notes for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderNote[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotesGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote[]';
        $request = $this->ordersOrderIdNotesGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotesGetAsync
     *
     * Get a list of Notes for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesGetAsync($orderId)
    {
        return $this->ordersOrderIdNotesGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdNotesGetAsyncWithHttpInfo
     *
     * Get a list of Notes for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote[]';
        $request = $this->ordersOrderIdNotesGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdNotesGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdNotesGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdNotesGet'
            );
        }

        $resourcePath = '/orders/{orderId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdDelete
     *
     * Delete a Note for an Order
     *
     * Usage: Order::find(123)->notes(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdNotesOrderNoteIdDelete($orderId, $orderNoteId)
    {
        list($response) = $this->ordersOrderIdNotesOrderNoteIdDeleteWithHttpInfo($orderId, $orderNoteId);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdDeleteWithHttpInfo
     *
     * Delete a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotesOrderNoteIdDeleteWithHttpInfo($orderId, $orderNoteId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdNotesOrderNoteIdDeleteRequest($orderId, $orderNoteId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdDeleteAsync
     *
     * Delete a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdDeleteAsync($orderId, $orderNoteId)
    {
        return $this->ordersOrderIdNotesOrderNoteIdDeleteAsyncWithHttpInfo($orderId, $orderNoteId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdDeleteAsyncWithHttpInfo
     *
     * Delete a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdDeleteAsyncWithHttpInfo($orderId, $orderNoteId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdNotesOrderNoteIdDeleteRequest($orderId, $orderNoteId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdNotesOrderNoteIdDelete'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdNotesOrderNoteIdDeleteRequest($orderId, $orderNoteId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdNotesOrderNoteIdDelete'
            );
        }
        // verify the required parameter 'orderNoteId' is set
        if ($orderNoteId === null || (is_array($orderNoteId) && count($orderNoteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderNoteId when calling ordersOrderIdNotesOrderNoteIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}/notes/{orderNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderNoteId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNoteId' . '}',
                ObjectSerializer::toPathValue($orderNoteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdGet
     *
     * Get info about a Note for an Order
     *
     * Usage: Order::find(123)->notes(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderNote
     */
    public function ordersOrderIdNotesOrderNoteIdGet($orderId, $orderNoteId)
    {
        list($response) = $this->ordersOrderIdNotesOrderNoteIdGetWithHttpInfo($orderId, $orderNoteId);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdGetWithHttpInfo
     *
     * Get info about a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotesOrderNoteIdGetWithHttpInfo($orderId, $orderNoteId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesOrderNoteIdGetRequest($orderId, $orderNoteId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdGetAsync
     *
     * Get info about a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdGetAsync($orderId, $orderNoteId)
    {
        return $this->ordersOrderIdNotesOrderNoteIdGetAsyncWithHttpInfo($orderId, $orderNoteId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdGetAsyncWithHttpInfo
     *
     * Get info about a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdGetAsyncWithHttpInfo($orderId, $orderNoteId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesOrderNoteIdGetRequest($orderId, $orderNoteId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdNotesOrderNoteIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdNotesOrderNoteIdGetRequest($orderId, $orderNoteId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdNotesOrderNoteIdGet'
            );
        }
        // verify the required parameter 'orderNoteId' is set
        if ($orderNoteId === null || (is_array($orderNoteId) && count($orderNoteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderNoteId when calling ordersOrderIdNotesOrderNoteIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/notes/{orderNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderNoteId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNoteId' . '}',
                ObjectSerializer::toPathValue($orderNoteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdPut
     *
     * Update a Note for an Order
     *
     * Usage: Order::find(123)->notes(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderNote
     */
    public function ordersOrderIdNotesOrderNoteIdPut($orderId, $orderNoteId, $body = null)
    {
        list($response) = $this->ordersOrderIdNotesOrderNoteIdPutWithHttpInfo($orderId, $orderNoteId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdPutWithHttpInfo
     *
     * Update a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotesOrderNoteIdPutWithHttpInfo($orderId, $orderNoteId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesOrderNoteIdPutRequest($orderId, $orderNoteId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdPutAsync
     *
     * Update a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdPutAsync($orderId, $orderNoteId, $body = null)
    {
        return $this->ordersOrderIdNotesOrderNoteIdPutAsyncWithHttpInfo($orderId, $orderNoteId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdNotesOrderNoteIdPutAsyncWithHttpInfo
     *
     * Update a Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesOrderNoteIdPutAsyncWithHttpInfo($orderId, $orderNoteId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesOrderNoteIdPutRequest($orderId, $orderNoteId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdNotesOrderNoteIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderNoteId Order Note Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdNotesOrderNoteIdPutRequest($orderId, $orderNoteId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdNotesOrderNoteIdPut'
            );
        }
        // verify the required parameter 'orderNoteId' is set
        if ($orderNoteId === null || (is_array($orderNoteId) && count($orderNoteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderNoteId when calling ordersOrderIdNotesOrderNoteIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}/notes/{orderNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderNoteId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNoteId' . '}',
                ObjectSerializer::toPathValue($orderNoteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdNotesPost
     *
     * Create a new Note for an Order
     *
     * Usage: Order::find(123)->notes->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderNote
     */
    public function ordersOrderIdNotesPost($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdNotesPostWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotesPostWithHttpInfo
     *
     * Create a new Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotesPostWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesPostRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotesPostAsync
     *
     * Create a new Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesPostAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdNotesPostAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdNotesPostAsyncWithHttpInfo
     *
     * Create a new Note for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdNotesPostAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderNote';
        $request = $this->ordersOrderIdNotesPostRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdNotesPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderNote $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdNotesPostRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdNotesPost'
            );
        }

        $resourcePath = '/orders/{orderId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPackagesGet
     *
     * Get a list of Packages for an Order
     *
     * Usage: Order::find(123)->payments
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPackage[]
     */
    public function ordersOrderIdPackagesGet($orderId)
    {
        list($response) = $this->ordersOrderIdPackagesGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdPackagesGetWithHttpInfo
     *
     * Get a list of Packages for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPackage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPackagesGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPackage[]';
        $request = $this->ordersOrderIdPackagesGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPackage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPackagesGetAsync
     *
     * Get a list of Packages for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPackagesGetAsync($orderId)
    {
        return $this->ordersOrderIdPackagesGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPackagesGetAsyncWithHttpInfo
     *
     * Get a list of Packages for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPackagesGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPackage[]';
        $request = $this->ordersOrderIdPackagesGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPackagesGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPackagesGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPackagesGet'
            );
        }

        $resourcePath = '/orders/{orderId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPackagesOrderPackageIdGet
     *
     * Get info about a Package for an Order
     *
     * Usage: Order::find(123)->payments(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPackageId Order Package Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPackage
     */
    public function ordersOrderIdPackagesOrderPackageIdGet($orderId, $orderPackageId)
    {
        list($response) = $this->ordersOrderIdPackagesOrderPackageIdGetWithHttpInfo($orderId, $orderPackageId);
        return $response;
    }

    /**
     * Operation ordersOrderIdPackagesOrderPackageIdGetWithHttpInfo
     *
     * Get info about a Package for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPackageId Order Package Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPackage, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPackagesOrderPackageIdGetWithHttpInfo($orderId, $orderPackageId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPackage';
        $request = $this->ordersOrderIdPackagesOrderPackageIdGetRequest($orderId, $orderPackageId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPackagesOrderPackageIdGetAsync
     *
     * Get info about a Package for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPackageId Order Package Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPackagesOrderPackageIdGetAsync($orderId, $orderPackageId)
    {
        return $this->ordersOrderIdPackagesOrderPackageIdGetAsyncWithHttpInfo($orderId, $orderPackageId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPackagesOrderPackageIdGetAsyncWithHttpInfo
     *
     * Get info about a Package for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPackageId Order Package Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPackagesOrderPackageIdGetAsyncWithHttpInfo($orderId, $orderPackageId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPackage';
        $request = $this->ordersOrderIdPackagesOrderPackageIdGetRequest($orderId, $orderPackageId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPackagesOrderPackageIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPackageId Order Package Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPackagesOrderPackageIdGetRequest($orderId, $orderPackageId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPackagesOrderPackageIdGet'
            );
        }
        // verify the required parameter 'orderPackageId' is set
        if ($orderPackageId === null || (is_array($orderPackageId) && count($orderPackageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPackageId when calling ordersOrderIdPackagesOrderPackageIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/packages/{orderPackageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderPackageId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderPackageId' . '}',
                ObjectSerializer::toPathValue($orderPackageId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPaymentsGet
     *
     * Get a list of Payments for an Order
     *
     * Usage: Order::find(123)->payments
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPayment[]
     */
    public function ordersOrderIdPaymentsGet($orderId)
    {
        list($response) = $this->ordersOrderIdPaymentsGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdPaymentsGetWithHttpInfo
     *
     * Get a list of Payments for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPayment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPaymentsGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment[]';
        $request = $this->ordersOrderIdPaymentsGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPaymentsGetAsync
     *
     * Get a list of Payments for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsGetAsync($orderId)
    {
        return $this->ordersOrderIdPaymentsGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPaymentsGetAsyncWithHttpInfo
     *
     * Get a list of Payments for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment[]';
        $request = $this->ordersOrderIdPaymentsGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPaymentsGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPaymentsGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPaymentsGet'
            );
        }

        $resourcePath = '/orders/{orderId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdDelete
     *
     * Delete a Payment for an Order
     *
     * Usage: Order::find(123)->payments(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdPaymentsOrderPaymentIdDelete($orderId, $orderPaymentId)
    {
        list($response) = $this->ordersOrderIdPaymentsOrderPaymentIdDeleteWithHttpInfo($orderId, $orderPaymentId);
        return $response;
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdDeleteWithHttpInfo
     *
     * Delete a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPaymentsOrderPaymentIdDeleteWithHttpInfo($orderId, $orderPaymentId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdDeleteRequest($orderId, $orderPaymentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdDeleteAsync
     *
     * Delete a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdDeleteAsync($orderId, $orderPaymentId)
    {
        return $this->ordersOrderIdPaymentsOrderPaymentIdDeleteAsyncWithHttpInfo($orderId, $orderPaymentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdDeleteAsyncWithHttpInfo
     *
     * Delete a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdDeleteAsyncWithHttpInfo($orderId, $orderPaymentId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdDeleteRequest($orderId, $orderPaymentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPaymentsOrderPaymentIdDelete'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPaymentsOrderPaymentIdDeleteRequest($orderId, $orderPaymentId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPaymentsOrderPaymentIdDelete'
            );
        }
        // verify the required parameter 'orderPaymentId' is set
        if ($orderPaymentId === null || (is_array($orderPaymentId) && count($orderPaymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPaymentId when calling ordersOrderIdPaymentsOrderPaymentIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}/payments/{orderPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderPaymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderPaymentId' . '}',
                ObjectSerializer::toPathValue($orderPaymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdGet
     *
     * Get info about a Payment for an Order
     *
     * Usage: Order::find(123)->payments(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPayment
     */
    public function ordersOrderIdPaymentsOrderPaymentIdGet($orderId, $orderPaymentId)
    {
        list($response) = $this->ordersOrderIdPaymentsOrderPaymentIdGetWithHttpInfo($orderId, $orderPaymentId);
        return $response;
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdGetWithHttpInfo
     *
     * Get info about a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPaymentsOrderPaymentIdGetWithHttpInfo($orderId, $orderPaymentId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdGetRequest($orderId, $orderPaymentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdGetAsync
     *
     * Get info about a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdGetAsync($orderId, $orderPaymentId)
    {
        return $this->ordersOrderIdPaymentsOrderPaymentIdGetAsyncWithHttpInfo($orderId, $orderPaymentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdGetAsyncWithHttpInfo
     *
     * Get info about a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdGetAsyncWithHttpInfo($orderId, $orderPaymentId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdGetRequest($orderId, $orderPaymentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPaymentsOrderPaymentIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPaymentsOrderPaymentIdGetRequest($orderId, $orderPaymentId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPaymentsOrderPaymentIdGet'
            );
        }
        // verify the required parameter 'orderPaymentId' is set
        if ($orderPaymentId === null || (is_array($orderPaymentId) && count($orderPaymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPaymentId when calling ordersOrderIdPaymentsOrderPaymentIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/payments/{orderPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderPaymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderPaymentId' . '}',
                ObjectSerializer::toPathValue($orderPaymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdPut
     *
     * Update a Payment for an Order
     *
     * Usage: Order::find(123)->payments(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPayment
     */
    public function ordersOrderIdPaymentsOrderPaymentIdPut($orderId, $orderPaymentId, $body = null)
    {
        list($response) = $this->ordersOrderIdPaymentsOrderPaymentIdPutWithHttpInfo($orderId, $orderPaymentId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdPutWithHttpInfo
     *
     * Update a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPaymentsOrderPaymentIdPutWithHttpInfo($orderId, $orderPaymentId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdPutRequest($orderId, $orderPaymentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdPutAsync
     *
     * Update a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdPutAsync($orderId, $orderPaymentId, $body = null)
    {
        return $this->ordersOrderIdPaymentsOrderPaymentIdPutAsyncWithHttpInfo($orderId, $orderPaymentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPaymentsOrderPaymentIdPutAsyncWithHttpInfo
     *
     * Update a Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsOrderPaymentIdPutAsyncWithHttpInfo($orderId, $orderPaymentId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsOrderPaymentIdPutRequest($orderId, $orderPaymentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPaymentsOrderPaymentIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $orderPaymentId Order Payment Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPaymentsOrderPaymentIdPutRequest($orderId, $orderPaymentId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPaymentsOrderPaymentIdPut'
            );
        }
        // verify the required parameter 'orderPaymentId' is set
        if ($orderPaymentId === null || (is_array($orderPaymentId) && count($orderPaymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPaymentId when calling ordersOrderIdPaymentsOrderPaymentIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}/payments/{orderPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderPaymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderPaymentId' . '}',
                ObjectSerializer::toPathValue($orderPaymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPaymentsPost
     *
     * Create a new Payment for an Order
     *
     * Usage: Order::find(123)->payments->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\OrderPayment
     */
    public function ordersOrderIdPaymentsPost($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdPaymentsPostWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdPaymentsPostWithHttpInfo
     *
     * Create a new Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\OrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPaymentsPostWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsPostRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\OrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPaymentsPostAsync
     *
     * Create a new Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsPostAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdPaymentsPostAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPaymentsPostAsyncWithHttpInfo
     *
     * Create a new Payment for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPaymentsPostAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\OrderPayment';
        $request = $this->ordersOrderIdPaymentsPostRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPaymentsPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\OrderPayment $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPaymentsPostRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPaymentsPost'
            );
        }

        $resourcePath = '/orders/{orderId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdPut
     *
     * Update an Order
     *
     * Usage: Order::find(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Order
     */
    public function ordersOrderIdPut($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdPutWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdPutWithHttpInfo
     *
     * Update an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdPutWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersOrderIdPutRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdPutAsync
     *
     * Update an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPutAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdPutAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdPutAsyncWithHttpInfo
     *
     * Update an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdPutAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersOrderIdPutRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdPutRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdDelete
     *
     * Delete an Applied Order Service for an Order
     *
     * Usage: Order::find(123)->services(123)->delete()
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdDelete($orderId, $appliedOrderServiceId)
    {
        list($response) = $this->ordersOrderIdServicesAppliedOrderServiceIdDeleteWithHttpInfo($orderId, $appliedOrderServiceId);
        return $response;
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdDeleteWithHttpInfo
     *
     * Delete an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdDeleteWithHttpInfo($orderId, $appliedOrderServiceId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdDeleteRequest($orderId, $appliedOrderServiceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdDeleteAsync
     *
     * Delete an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdDeleteAsync($orderId, $appliedOrderServiceId)
    {
        return $this->ordersOrderIdServicesAppliedOrderServiceIdDeleteAsyncWithHttpInfo($orderId, $appliedOrderServiceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdDeleteAsyncWithHttpInfo
     *
     * Delete an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdDeleteAsyncWithHttpInfo($orderId, $appliedOrderServiceId)
    {
        $returnType = 'object';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdDeleteRequest($orderId, $appliedOrderServiceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdServicesAppliedOrderServiceIdDelete'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdServicesAppliedOrderServiceIdDeleteRequest($orderId, $appliedOrderServiceId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdServicesAppliedOrderServiceIdDelete'
            );
        }
        // verify the required parameter 'appliedOrderServiceId' is set
        if ($appliedOrderServiceId === null || (is_array($appliedOrderServiceId) && count($appliedOrderServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedOrderServiceId when calling ordersOrderIdServicesAppliedOrderServiceIdDelete'
            );
        }

        $resourcePath = '/orders/{orderId}/services/{appliedOrderServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($appliedOrderServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedOrderServiceId' . '}',
                ObjectSerializer::toPathValue($appliedOrderServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdGet
     *
     * Get info about an Applied Order Service for an Order
     *
     * Usage: Order::find(123)->services(123)
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdGet($orderId, $appliedOrderServiceId)
    {
        list($response) = $this->ordersOrderIdServicesAppliedOrderServiceIdGetWithHttpInfo($orderId, $appliedOrderServiceId);
        return $response;
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdGetWithHttpInfo
     *
     * Get info about an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdGetWithHttpInfo($orderId, $appliedOrderServiceId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdGetRequest($orderId, $appliedOrderServiceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdGetAsync
     *
     * Get info about an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdGetAsync($orderId, $appliedOrderServiceId)
    {
        return $this->ordersOrderIdServicesAppliedOrderServiceIdGetAsyncWithHttpInfo($orderId, $appliedOrderServiceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdGetAsyncWithHttpInfo
     *
     * Get info about an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdGetAsyncWithHttpInfo($orderId, $appliedOrderServiceId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdGetRequest($orderId, $appliedOrderServiceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdServicesAppliedOrderServiceIdGet'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdServicesAppliedOrderServiceIdGetRequest($orderId, $appliedOrderServiceId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdServicesAppliedOrderServiceIdGet'
            );
        }
        // verify the required parameter 'appliedOrderServiceId' is set
        if ($appliedOrderServiceId === null || (is_array($appliedOrderServiceId) && count($appliedOrderServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedOrderServiceId when calling ordersOrderIdServicesAppliedOrderServiceIdGet'
            );
        }

        $resourcePath = '/orders/{orderId}/services/{appliedOrderServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($appliedOrderServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedOrderServiceId' . '}',
                ObjectSerializer::toPathValue($appliedOrderServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdPut
     *
     * Update an Applied Order Service for an Order
     *
     * Usage: Order::find(123)->services(123)->update([])
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdPut($orderId, $appliedOrderServiceId, $body = null)
    {
        list($response) = $this->ordersOrderIdServicesAppliedOrderServiceIdPutWithHttpInfo($orderId, $appliedOrderServiceId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdPutWithHttpInfo
     *
     * Update an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdPutWithHttpInfo($orderId, $appliedOrderServiceId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdPutRequest($orderId, $appliedOrderServiceId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdPutAsync
     *
     * Update an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdPutAsync($orderId, $appliedOrderServiceId, $body = null)
    {
        return $this->ordersOrderIdServicesAppliedOrderServiceIdPutAsyncWithHttpInfo($orderId, $appliedOrderServiceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdServicesAppliedOrderServiceIdPutAsyncWithHttpInfo
     *
     * Update an Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesAppliedOrderServiceIdPutAsyncWithHttpInfo($orderId, $appliedOrderServiceId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesAppliedOrderServiceIdPutRequest($orderId, $appliedOrderServiceId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdServicesAppliedOrderServiceIdPut'
     *
     * @param  int $orderId Order Id (required)
     * @param  int $appliedOrderServiceId Applied Order Service Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdServicesAppliedOrderServiceIdPutRequest($orderId, $appliedOrderServiceId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdServicesAppliedOrderServiceIdPut'
            );
        }
        // verify the required parameter 'appliedOrderServiceId' is set
        if ($appliedOrderServiceId === null || (is_array($appliedOrderServiceId) && count($appliedOrderServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appliedOrderServiceId when calling ordersOrderIdServicesAppliedOrderServiceIdPut'
            );
        }

        $resourcePath = '/orders/{orderId}/services/{appliedOrderServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($appliedOrderServiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'appliedOrderServiceId' . '}',
                ObjectSerializer::toPathValue($appliedOrderServiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdServicesGet
     *
     * Get a list of Applied Order Services for an Order
     *
     * Usage: Order::find(123)->services
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService[]
     */
    public function ordersOrderIdServicesGet($orderId)
    {
        list($response) = $this->ordersOrderIdServicesGetWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation ordersOrderIdServicesGetWithHttpInfo
     *
     * Get a list of Applied Order Services for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdServicesGetWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService[]';
        $request = $this->ordersOrderIdServicesGetRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdServicesGetAsync
     *
     * Get a list of Applied Order Services for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesGetAsync($orderId)
    {
        return $this->ordersOrderIdServicesGetAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdServicesGetAsyncWithHttpInfo
     *
     * Get a list of Applied Order Services for an Order
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesGetAsyncWithHttpInfo($orderId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService[]';
        $request = $this->ordersOrderIdServicesGetRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdServicesGet'
     *
     * @param  int $orderId Order Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdServicesGetRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdServicesGet'
            );
        }

        $resourcePath = '/orders/{orderId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdServicesPost
     *
     * Create a new Applied Order Service for an Order
     *
     * Usage: Order::find(123)->services->create([])
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService
     */
    public function ordersOrderIdServicesPost($orderId, $body = null)
    {
        list($response) = $this->ordersOrderIdServicesPostWithHttpInfo($orderId, $body);
        return $response;
    }

    /**
     * Operation ordersOrderIdServicesPostWithHttpInfo
     *
     * Create a new Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdServicesPostWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesPostRequest($orderId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdServicesPostAsync
     *
     * Create a new Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesPostAsync($orderId, $body = null)
    {
        return $this->ordersOrderIdServicesPostAsyncWithHttpInfo($orderId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdServicesPostAsyncWithHttpInfo
     *
     * Create a new Applied Order Service for an Order
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdServicesPostAsyncWithHttpInfo($orderId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\AppliedOrderService';
        $request = $this->ordersOrderIdServicesPostRequest($orderId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdServicesPost'
     *
     * @param  int $orderId Order Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\AppliedOrderService $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersOrderIdServicesPostRequest($orderId, $body = null)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling ordersOrderIdServicesPost'
            );
        }

        $resourcePath = '/orders/{orderId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersPost
     *
     * Create a new Order
     *
     * Usage: Order::create([])
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Order
     */
    public function ordersPost($body = null)
    {
        list($response) = $this->ordersPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation ordersPostWithHttpInfo
     *
     * Create a new Order
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersPostWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersPostAsync
     *
     * Create a new Order
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPostAsync($body = null)
    {
        return $this->ordersPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersPostAsyncWithHttpInfo
     *
     * Create a new Order
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Order';
        $request = $this->ordersPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersPost'
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Order $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function ordersPostRequest($body = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
