<?php
/**
 * GizmosApi
 * PHP version 5
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test Fixtures
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HappyCog\OsborneApi\ErpService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HappyCog\OsborneApi\ErpService\ApiException;
use HappyCog\OsborneApi\ErpService\Configuration;
use HappyCog\OsborneApi\ErpService\HeaderSelector;
use HappyCog\OsborneApi\ErpService\ObjectSerializer;

/**
 * GizmosApi Class Doc Comment
 *
 * @category Class
 * @package  HappyCog\OsborneApi\ErpService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GizmosApi extends \HappyCog\OsborneApi\Resources\Base\ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        parent::__construct();

        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation definitions available for this API endpoint
     *
     * @var array
     */
    protected $operationDefinitions = [
        'gizmosGet' => [
            'path' => '/gizmos',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'gizmosGizmoIdDelete' => [
            'path' => '/gizmos/{gizmoId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdGet' => [
            'path' => '/gizmos/{gizmoId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdPut' => [
            'path' => '/gizmos/{gizmoId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Gizmo',
        ],
        'gizmosGizmoIdThingsGet' => [
            'path' => '/gizmos/{gizmoId}/things',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsPost' => [
            'path' => '/gizmos/{gizmoId}/things',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Thing',
        ],
        'gizmosGizmoIdThingsThingIdDelete' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsThingIdGet' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsThingIdPut' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Thing',
        ],
        'gizmosGizmoIdThingsThingIdWidgetsGet' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}/widgets',
            'method' => 'GET',
            'collection' => true,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsThingIdWidgetsPost' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}/widgets',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Widget',
        ],
        'gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}',
            'method' => 'DELETE',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}',
            'method' => 'GET',
            'collection' => false,
            'requestType' => '',
        ],
        'gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut' => [
            'path' => '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}',
            'method' => 'PUT',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Widget',
        ],
        'gizmosPost' => [
            'path' => '/gizmos',
            'method' => 'POST',
            'collection' => false,
            'requestType' => '\HappyCog\OsborneApi\ErpService\Model\Gizmo',
        ],
    ];

    /**
     * Operation gizmosGet
     *
     * Get a list of Gizmos
     *
     * Usage: Gizmo::all()
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Gizmo[]
     */
    public function gizmosGet()
    {
        list($response) = $this->gizmosGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation gizmosGetWithHttpInfo
     *
     * Get a list of Gizmos
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Gizmo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGetWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo[]';
        $request = $this->gizmosGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Gizmo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGetAsync
     *
     * Get a list of Gizmos
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGetAsync()
    {
        return $this->gizmosGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGetAsyncWithHttpInfo
     *
     * Get a list of Gizmos
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGetAsyncWithHttpInfo()
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo[]';
        $request = $this->gizmosGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGet'
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGetRequest()
    {

        $resourcePath = '/gizmos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdDelete
     *
     * Delete a Gizmo
     *
     * Usage: Gizmo::find(123)->delete()
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function gizmosGizmoIdDelete($gizmoId)
    {
        list($response) = $this->gizmosGizmoIdDeleteWithHttpInfo($gizmoId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdDeleteWithHttpInfo
     *
     * Delete a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdDeleteWithHttpInfo($gizmoId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdDeleteRequest($gizmoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdDeleteAsync
     *
     * Delete a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdDeleteAsync($gizmoId)
    {
        return $this->gizmosGizmoIdDeleteAsyncWithHttpInfo($gizmoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdDeleteAsyncWithHttpInfo
     *
     * Delete a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdDeleteAsyncWithHttpInfo($gizmoId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdDeleteRequest($gizmoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdDelete'
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdDeleteRequest($gizmoId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdDelete'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdGet
     *
     * Get info about a Gizmo
     *
     * Usage: Gizmo::find(123)
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Gizmo
     */
    public function gizmosGizmoIdGet($gizmoId)
    {
        list($response) = $this->gizmosGizmoIdGetWithHttpInfo($gizmoId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdGetWithHttpInfo
     *
     * Get info about a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Gizmo, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdGetWithHttpInfo($gizmoId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosGizmoIdGetRequest($gizmoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Gizmo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdGetAsync
     *
     * Get info about a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdGetAsync($gizmoId)
    {
        return $this->gizmosGizmoIdGetAsyncWithHttpInfo($gizmoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdGetAsyncWithHttpInfo
     *
     * Get info about a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdGetAsyncWithHttpInfo($gizmoId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosGizmoIdGetRequest($gizmoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdGet'
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdGetRequest($gizmoId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdGet'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdPut
     *
     * Update a Gizmo
     *
     * Usage: Gizmo::find(123)->update([])
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Gizmo
     */
    public function gizmosGizmoIdPut($gizmoId, $body = null)
    {
        list($response) = $this->gizmosGizmoIdPutWithHttpInfo($gizmoId, $body);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdPutWithHttpInfo
     *
     * Update a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Gizmo, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdPutWithHttpInfo($gizmoId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosGizmoIdPutRequest($gizmoId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Gizmo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdPutAsync
     *
     * Update a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdPutAsync($gizmoId, $body = null)
    {
        return $this->gizmosGizmoIdPutAsyncWithHttpInfo($gizmoId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdPutAsyncWithHttpInfo
     *
     * Update a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdPutAsyncWithHttpInfo($gizmoId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosGizmoIdPutRequest($gizmoId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdPut'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdPutRequest($gizmoId, $body = null)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdPut'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsGet
     *
     * Get a list of Things for a Gizmo
     *
     * Usage: Gizmo::find(123)->things
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Thing[]
     */
    public function gizmosGizmoIdThingsGet($gizmoId)
    {
        list($response) = $this->gizmosGizmoIdThingsGetWithHttpInfo($gizmoId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsGetWithHttpInfo
     *
     * Get a list of Things for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Thing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsGetWithHttpInfo($gizmoId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing[]';
        $request = $this->gizmosGizmoIdThingsGetRequest($gizmoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Thing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsGetAsync
     *
     * Get a list of Things for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsGetAsync($gizmoId)
    {
        return $this->gizmosGizmoIdThingsGetAsyncWithHttpInfo($gizmoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsGetAsyncWithHttpInfo
     *
     * Get a list of Things for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsGetAsyncWithHttpInfo($gizmoId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing[]';
        $request = $this->gizmosGizmoIdThingsGetRequest($gizmoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsGet'
     *
     * @param  int $gizmoId Gizmo Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsGetRequest($gizmoId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsGet'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsPost
     *
     * Create a new Thing for a Gizmo
     *
     * Usage: Gizmo::find(123)->things->create([])
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Thing
     */
    public function gizmosGizmoIdThingsPost($gizmoId, $body = null)
    {
        list($response) = $this->gizmosGizmoIdThingsPostWithHttpInfo($gizmoId, $body);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsPostWithHttpInfo
     *
     * Create a new Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Thing, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsPostWithHttpInfo($gizmoId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsPostRequest($gizmoId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Thing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsPostAsync
     *
     * Create a new Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsPostAsync($gizmoId, $body = null)
    {
        return $this->gizmosGizmoIdThingsPostAsyncWithHttpInfo($gizmoId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsPostAsyncWithHttpInfo
     *
     * Create a new Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsPostAsyncWithHttpInfo($gizmoId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsPostRequest($gizmoId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsPost'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsPostRequest($gizmoId, $body = null)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsPost'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdDelete
     *
     * Delete a Thing for a Gizmo
     *
     * Usage: Gizmo::find(123)->things(123)->delete()
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function gizmosGizmoIdThingsThingIdDelete($gizmoId, $thingId)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdDeleteWithHttpInfo($gizmoId, $thingId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdDeleteWithHttpInfo
     *
     * Delete a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdDeleteWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdThingsThingIdDeleteRequest($gizmoId, $thingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdDeleteAsync
     *
     * Delete a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdDeleteAsync($gizmoId, $thingId)
    {
        return $this->gizmosGizmoIdThingsThingIdDeleteAsyncWithHttpInfo($gizmoId, $thingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdDeleteAsyncWithHttpInfo
     *
     * Delete a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdDeleteAsyncWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdThingsThingIdDeleteRequest($gizmoId, $thingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdDelete'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdDeleteRequest($gizmoId, $thingId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdDelete'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdDelete'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdGet
     *
     * Get info about a Thing for a Gizmo
     *
     * Usage: Gizmo::find(123)->things(123)
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Thing
     */
    public function gizmosGizmoIdThingsThingIdGet($gizmoId, $thingId)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdGetWithHttpInfo($gizmoId, $thingId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdGetWithHttpInfo
     *
     * Get info about a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Thing, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdGetWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsThingIdGetRequest($gizmoId, $thingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Thing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdGetAsync
     *
     * Get info about a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdGetAsync($gizmoId, $thingId)
    {
        return $this->gizmosGizmoIdThingsThingIdGetAsyncWithHttpInfo($gizmoId, $thingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdGetAsyncWithHttpInfo
     *
     * Get info about a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdGetAsyncWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsThingIdGetRequest($gizmoId, $thingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdGet'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdGetRequest($gizmoId, $thingId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdGet'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdGet'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdPut
     *
     * Update a Thing for a Gizmo
     *
     * Usage: Gizmo::find(123)->things(123)->update([])
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Thing
     */
    public function gizmosGizmoIdThingsThingIdPut($gizmoId, $thingId, $body = null)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdPutWithHttpInfo($gizmoId, $thingId, $body);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdPutWithHttpInfo
     *
     * Update a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Thing, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdPutWithHttpInfo($gizmoId, $thingId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsThingIdPutRequest($gizmoId, $thingId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Thing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdPutAsync
     *
     * Update a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdPutAsync($gizmoId, $thingId, $body = null)
    {
        return $this->gizmosGizmoIdThingsThingIdPutAsyncWithHttpInfo($gizmoId, $thingId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdPutAsyncWithHttpInfo
     *
     * Update a Thing for a Gizmo
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdPutAsyncWithHttpInfo($gizmoId, $thingId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Thing';
        $request = $this->gizmosGizmoIdThingsThingIdPutRequest($gizmoId, $thingId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdPut'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Thing $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdPutRequest($gizmoId, $thingId, $body = null)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdPut'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdPut'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsGet
     *
     * Get a list of Widgets for a Gizmo Thing
     *
     * Usage: Gizmo::find(123)->things(123)->widgets
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Widget[]
     */
    public function gizmosGizmoIdThingsThingIdWidgetsGet($gizmoId, $thingId)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdWidgetsGetWithHttpInfo($gizmoId, $thingId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsGetWithHttpInfo
     *
     * Get a list of Widgets for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Widget[], HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdWidgetsGetWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget[]';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsGetRequest($gizmoId, $thingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Widget[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsGetAsync
     *
     * Get a list of Widgets for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsGetAsync($gizmoId, $thingId)
    {
        return $this->gizmosGizmoIdThingsThingIdWidgetsGetAsyncWithHttpInfo($gizmoId, $thingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsGetAsyncWithHttpInfo
     *
     * Get a list of Widgets for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsGetAsyncWithHttpInfo($gizmoId, $thingId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget[]';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsGetRequest($gizmoId, $thingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdWidgetsGet'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdWidgetsGetRequest($gizmoId, $thingId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdWidgetsGet'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdWidgetsGet'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsPost
     *
     * Create a new Widget for a Gizmo Thing
     *
     * Usage: Gizmo::find(123)->things(123)->widgets->create([])
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Widget
     */
    public function gizmosGizmoIdThingsThingIdWidgetsPost($gizmoId, $thingId, $body = null)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdWidgetsPostWithHttpInfo($gizmoId, $thingId, $body);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsPostWithHttpInfo
     *
     * Create a new Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Widget, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdWidgetsPostWithHttpInfo($gizmoId, $thingId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsPostRequest($gizmoId, $thingId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Widget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsPostAsync
     *
     * Create a new Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsPostAsync($gizmoId, $thingId, $body = null)
    {
        return $this->gizmosGizmoIdThingsThingIdWidgetsPostAsyncWithHttpInfo($gizmoId, $thingId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsPostAsyncWithHttpInfo
     *
     * Create a new Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsPostAsyncWithHttpInfo($gizmoId, $thingId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsPostRequest($gizmoId, $thingId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdWidgetsPost'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdWidgetsPostRequest($gizmoId, $thingId, $body = null)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdWidgetsPost'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdWidgetsPost'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete
     *
     * Delete an Widget for a Gizmo Thing
     *
     * Usage: Gizmo::find(123)->things(123)->widgets(123)->delete()
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return object
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete($gizmoId, $thingId, $widgetId)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteWithHttpInfo($gizmoId, $thingId, $widgetId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteWithHttpInfo
     *
     * Delete an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteWithHttpInfo($gizmoId, $thingId, $widgetId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteRequest($gizmoId, $thingId, $widgetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteAsync
     *
     * Delete an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteAsync($gizmoId, $thingId, $widgetId)
    {
        return $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteAsyncWithHttpInfo($gizmoId, $thingId, $widgetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteAsyncWithHttpInfo
     *
     * Delete an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteAsyncWithHttpInfo($gizmoId, $thingId, $widgetId)
    {
        $returnType = 'object';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteRequest($gizmoId, $thingId, $widgetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdWidgetsWidgetIdDeleteRequest($gizmoId, $thingId, $widgetId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete'
            );
        }
        // verify the required parameter 'widgetId' is set
        if ($widgetId === null || (is_array($widgetId) && count($widgetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $widgetId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdDelete'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }
        // path params
        if ($widgetId !== null) {
            $resourcePath = str_replace(
                '{' . 'widgetId' . '}',
                ObjectSerializer::toPathValue($widgetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet
     *
     * Get info about an Widget for a Gizmo Thing
     *
     * Usage: Gizmo::find(123)->things(123)->widgets(123)
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Widget
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet($gizmoId, $thingId, $widgetId)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetWithHttpInfo($gizmoId, $thingId, $widgetId);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetWithHttpInfo
     *
     * Get info about an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Widget, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetWithHttpInfo($gizmoId, $thingId, $widgetId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetRequest($gizmoId, $thingId, $widgetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Widget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetAsync
     *
     * Get info about an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetAsync($gizmoId, $thingId, $widgetId)
    {
        return $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetAsyncWithHttpInfo($gizmoId, $thingId, $widgetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetAsyncWithHttpInfo
     *
     * Get info about an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetAsyncWithHttpInfo($gizmoId, $thingId, $widgetId)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetRequest($gizmoId, $thingId, $widgetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdWidgetsWidgetIdGetRequest($gizmoId, $thingId, $widgetId)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet'
            );
        }
        // verify the required parameter 'widgetId' is set
        if ($widgetId === null || (is_array($widgetId) && count($widgetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $widgetId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdGet'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }
        // path params
        if ($widgetId !== null) {
            $resourcePath = str_replace(
                '{' . 'widgetId' . '}',
                ObjectSerializer::toPathValue($widgetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut
     *
     * Update an Widget for a Gizmo Thing
     *
     * Usage: Gizmo::find(123)->things(123)->widgets(123)->update([])
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Widget
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut($gizmoId, $thingId, $widgetId, $body = null)
    {
        list($response) = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutWithHttpInfo($gizmoId, $thingId, $widgetId, $body);
        return $response;
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutWithHttpInfo
     *
     * Update an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Widget, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutWithHttpInfo($gizmoId, $thingId, $widgetId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutRequest($gizmoId, $thingId, $widgetId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Widget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutAsync
     *
     * Update an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutAsync($gizmoId, $thingId, $widgetId, $body = null)
    {
        return $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutAsyncWithHttpInfo($gizmoId, $thingId, $widgetId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutAsyncWithHttpInfo
     *
     * Update an Widget for a Gizmo Thing
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutAsyncWithHttpInfo($gizmoId, $thingId, $widgetId, $body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Widget';
        $request = $this->gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutRequest($gizmoId, $thingId, $widgetId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut'
     *
     * @param  int $gizmoId Gizmo Id (required)
     * @param  int $thingId Thing Id (required)
     * @param  int $widgetId Widget Id (required)
     * @param  \HappyCog\OsborneApi\ErpService\Model\Widget $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosGizmoIdThingsThingIdWidgetsWidgetIdPutRequest($gizmoId, $thingId, $widgetId, $body = null)
    {
        // verify the required parameter 'gizmoId' is set
        if ($gizmoId === null || (is_array($gizmoId) && count($gizmoId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gizmoId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut'
            );
        }
        // verify the required parameter 'thingId' is set
        if ($thingId === null || (is_array($thingId) && count($thingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thingId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut'
            );
        }
        // verify the required parameter 'widgetId' is set
        if ($widgetId === null || (is_array($widgetId) && count($widgetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $widgetId when calling gizmosGizmoIdThingsThingIdWidgetsWidgetIdPut'
            );
        }

        $resourcePath = '/gizmos/{gizmoId}/things/{thingId}/widgets/{widgetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gizmoId !== null) {
            $resourcePath = str_replace(
                '{' . 'gizmoId' . '}',
                ObjectSerializer::toPathValue($gizmoId),
                $resourcePath
            );
        }
        // path params
        if ($thingId !== null) {
            $resourcePath = str_replace(
                '{' . 'thingId' . '}',
                ObjectSerializer::toPathValue($thingId),
                $resourcePath
            );
        }
        // path params
        if ($widgetId !== null) {
            $resourcePath = str_replace(
                '{' . 'widgetId' . '}',
                ObjectSerializer::toPathValue($widgetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gizmosPost
     *
     * Create a new Gizmo
     *
     * Usage: Gizmo::create([])
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \HappyCog\OsborneApi\ErpService\Model\Gizmo
     */
    public function gizmosPost($body = null)
    {
        list($response) = $this->gizmosPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation gizmosPostWithHttpInfo
     *
     * Create a new Gizmo
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \HappyCog\OsborneApi\ErpService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \HappyCog\OsborneApi\ErpService\Model\Gizmo, HTTP status code, HTTP response headers (array of strings)
     */
    public function gizmosPostWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HappyCog\OsborneApi\ErpService\Model\Gizmo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gizmosPostAsync
     *
     * Create a new Gizmo
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosPostAsync($body = null)
    {
        return $this->gizmosPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gizmosPostAsyncWithHttpInfo
     *
     * Create a new Gizmo
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gizmosPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\HappyCog\OsborneApi\ErpService\Model\Gizmo';
        $request = $this->gizmosPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gizmosPost'
     *
     * @param  \HappyCog\OsborneApi\ErpService\Model\Gizmo $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gizmosPostRequest($body = null)
    {

        $resourcePath = '/gizmos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
